{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lidemy/Git 遠端協作及 Pull Request 介紹/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"f3b97887-f179-56cd-9865-f0d5334f7f2f","excerpt":"如何將程式碼從本地放上 Github repository 在 Github 上建立一個 repository\n 建立後系統會提示你該怎麼做，將 code 複製下來去終端機操作\n 操作遠端和本地的溝通 特別查一下推上本地的新分支，這個指令會把你手邊的 today…","html":"<h3>如何將程式碼從本地放上 Github repository</h3>\n<ol>\n<li>在 Github 上建立一個 repository\n<img src=\"https://i.imgur.com/Jm3aBpx.png\"></li>\n<li>建立後系統會提示你該怎麼做，將 code 複製下來去終端機操作\n<img src=\"https://i.imgur.com/BZSzARM.png\"></li>\n<li>操作遠端和本地的溝通</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">#1 指定(-u)將 本地 master 推到 origin 的 master</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git push -u origin master</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">#2 推上本地commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git push origin master </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">#3 推上本地新建的分支</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git push origin 分支名稱</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">#4 拉下遠端的 commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git pull origin master </span></span></span></code></pre>\n<p>特別查一下推上本地的新分支，這個指令會把你手邊的 today 分支的內容，推一份到 origin 這個地方， origin 可能是 GitHub、GitLab 或是公司內部的 Git 伺服器，如果找不到這個分支，它會在 origin 這個地方形成一個同名的分支（today），也就是我們要的，將本地分支內容推到遠端形成分支。</p>\n<p>特別去查了一下<code>git push</code>，原來 push 指令的完整型態是長這樣</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git push origin master:master</span></span></span></code></pre>\n<p>意思就是「把本地的 master 分支的內容，推一份到 origin 上，並且在 origin 上建立一個 master 分支」，如果把指令調整一下：</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git push origin master:today</span></span></span></code></pre>\n<p>意思變成「把本地的 master 分支的內容，推一份到 origin 上，並且在 origin 上建立一個 today 分支」</p>\n<h3>使用 Pull Request（PR）</h3>\n<h4><strong>為什麼要使用 PR？</strong></h4>\n<p>知乎看到一個<a href=\"https://www.zhihu.com/question/21682976\">舉例</a>，改寫一下，比喻 Pull Request 過程像是我們在大學時教授出作業：</p>\n<blockquote>\n<ol>\n<li>以前助教會在課後幫同學補充上課內容和筆記，大家會在助教課抄寫一份筆記（fork）</li>\n<li>回家延伸內容及寫題目，完成後會讓助教先批改（發 Pull Request 給助教），由他確認內容沒有問題</li>\n<li>如需修正就再拿回來修正，一直到修改完成，助教才會收齊這些作業（merge）統一交給教授</li>\n</ol>\n</blockquote>\n<p>而運用到軟體開發上，開發者拿到一項 issue 或工作，會在一個專屬他的分支上進行開發，然後完成新功能後需要將它合併到主要分支上，但就像前面說的</p>\n<p><em><code>「master 分支需要維持穩定」</code></em></p>\n<p>大型專案不可能時常出問題，而且協作者太多也無法讓所有人有權限、都能拿到遠端的資料庫，因為「權限管理」而衍生出 Pull Request 功能。</p>\n<h4><strong>PR 主要功能</strong></h4>\n<ul>\n<li>通知：通知相關人員來檢查功能開發</li>\n<li>討論：針對某一段 code 在底下進行有效討論，而不會發散</li>\n<li>延伸功能：貢獻開源專案</li>\n</ul>\n<p>而有錯誤或需修正的地方，要求的修改 (follow-up commit) 會標示在這頁</p>\n<h3><strong>PR 流程</strong></h3>\n<ol>\n<li>先 Fork 一份原專案到自己的 GitHub 底下，你就有完整的權限，想怎麼改就怎麼改</li>\n<li>改完後，先推回（Push）你自己帳號的專案</li>\n<li>然後發 Pull Request 通知原作者知道你有做事，請他看一下。如果他認為 OK，會決定把你這些修改合併（Merge）到他的原專案</li>\n</ol>\n<p>參考資料：<a href=\"https://gitbook.tw/chapters/github/pull-request.html\">與其它開發者的互動 - 使用 Pull Request</a>、<a href=\"https://medium.com/@shoujhengduan/%E4%BB%80%E9%BA%BC%E6%98%AF-pull-request-b476ee3e0217\">什麼是 Pull Request?</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Lidemy/Git%20%E9%81%A0%E7%AB%AF%E5%8D%94%E4%BD%9C%E5%8F%8A%20Pull%20Request%20%E4%BB%8B%E7%B4%B9/#%E5%A6%82%E4%BD%95%E5%B0%87%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%BE%9E%E6%9C%AC%E5%9C%B0%E6%94%BE%E4%B8%8A-github-repository\">如何將程式碼從本地放上 Github repository</a></li>\n<li>\n<p><a href=\"/Lidemy/Git%20%E9%81%A0%E7%AB%AF%E5%8D%94%E4%BD%9C%E5%8F%8A%20Pull%20Request%20%E4%BB%8B%E7%B4%B9/#%E4%BD%BF%E7%94%A8-pull-request%EF%BC%88pr%EF%BC%89\">使用 Pull Request（PR）</a></p>\n<ul>\n<li><a href=\"/Lidemy/Git%20%E9%81%A0%E7%AB%AF%E5%8D%94%E4%BD%9C%E5%8F%8A%20Pull%20Request%20%E4%BB%8B%E7%B4%B9/#%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E4%BD%BF%E7%94%A8-pr%EF%BC%9F\"><strong>為什麼要使用 PR？</strong></a></li>\n<li><a href=\"/Lidemy/Git%20%E9%81%A0%E7%AB%AF%E5%8D%94%E4%BD%9C%E5%8F%8A%20Pull%20Request%20%E4%BB%8B%E7%B4%B9/#pr-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD\"><strong>PR 主要功能</strong></a></li>\n</ul>\n</li>\n<li><a href=\"/Lidemy/Git%20%E9%81%A0%E7%AB%AF%E5%8D%94%E4%BD%9C%E5%8F%8A%20Pull%20Request%20%E4%BB%8B%E7%B4%B9/#pr-%E6%B5%81%E7%A8%8B\"><strong>PR 流程</strong></a></li>\n</ul>","frontmatter":{"title":"Git 協作及 Pull Request 介紹","date":"Jun 05, 2020","tags":["git","Lidemy"],"category":"程式導師計畫","thumbnail":null}}},"pageContext":{"slug":"/Lidemy/Git 遠端協作及 Pull Request 介紹/","previous":{"fields":{"slug":"/kotlin/Restful API 是啥？有什麼不一樣？/"},"frontmatter":{"title":"Restful API 是啥？有什麼不一樣？","tags":["Kotlin","API"],"date":"2020-03-10","category":"Android","mark":null,"description":"認識 API、HTTP 協定和方法"}},"next":{"fields":{"slug":"/Lidemy/版本控制 - CLI 基礎及 Git 指令/"},"frontmatter":{"title":"Command Line 及 git 指令","tags":["git","Lidemy"],"date":"2020-06-05","category":"程式導師計畫","mark":null,"description":"用 CLI 對電腦下指令及如何進行版本控制"}}}},"staticQueryHashes":["63159454"]}