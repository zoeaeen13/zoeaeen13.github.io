{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lidemy/事件傳遞機制/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"a42f806f-c6df-5581-8e8c-1c7378a72fe5","excerpt":"JavaScript 是一個事件驅動（Event-driven）的語言，當瀏覽器載入網頁後，會等到「事件」被觸發（使用者點擊、按下鍵盤等）才會再進行相對應的執行。 事件（Event） 指的是在 DOM 物件上發生的事件，具有多種類型，可以參考這裡，而 Event…","html":"<p>JavaScript 是一個事件驅動（Event-driven）的語言，當瀏覽器載入網頁後，會等到「事件」被觸發（使用者點擊、按下鍵盤等）才會再進行相對應的執行。</p>\n<h5 id=\"事件（Event）\" style=\"position:relative;\">事件（Event）<a href=\"#%E4%BA%8B%E4%BB%B6%EF%BC%88Event%EF%BC%89\" aria-label=\"事件（Event） permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>指的是在 DOM 物件上發生的事件，具有多種類型，可以參考<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Event\">這裡</a>，而 Event 本身會包含所有事件的共同屬性及方法</p>\n<ul>\n<li>\n<p>常用 Event 屬性</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.currentTarget </span><span class=\"mtk3\">// 指向目前處理事件之監聽器所屬的 DOM 物件</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.eventPhase    </span><span class=\"mtk3\">// 指向事件目前的傳遞階段</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.target        </span><span class=\"mtk3\">// 指向最初觸發事件的 DOM 物件</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.timeStamp     </span><span class=\"mtk3\">// 事件發生至今的時間</span></span></span></code></pre>\n</li>\n<li>\n<p>一些常用 Event 方法</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.preventDefault()            </span><span class=\"mtk3\">// 取消事件的預設動作</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.stopPropagation()           </span><span class=\"mtk3\">// 阻止事件物件繼續捕捉或冒泡傳遞</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Event.stopImmediatePropagation()  </span><span class=\"mtk3\">// 尚未執行的已註冊之相同事件類型監聽器不會被呼叫</span></span></span></code></pre>\n</li>\n</ul>\n<h5 id=\"事件流程（Event-Flow）」\" style=\"position:relative;\">事件流程（Event Flow）」<a href=\"#%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%EF%BC%88Event-Flow%EF%BC%89%E3%80%8D\" aria-label=\"事件流程（Event Flow）」 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p><img src=\"https://miro.medium.com/max/945/1*Lpyc9tn3g5p5qPFAgNa1ZA.png\"></p>\n<p>事件流程，指事件被觸發後，網頁元素接收事件的順序傳遞事件目標（Event Target）經歷的過程，其機制分成三個階段：<strong>先捕獲再冒泡</strong></p>\n<blockquote>\n<p>The DOM event flow is the process through which the event originates from the DOM Events implementation and is dispatched into a tree.</p>\n</blockquote>\n<ol>\n<li>事件捕獲（Capturing phase）\n事件捕獲指的是 DOM 傳遞順序由上到下，從 document 一路下傳到<strong>被點擊</strong>的節點</li>\n<li>事件目標（Target phase）\n當事件的傳遞抵達被觸發事件的元素</li>\n<li>事件冒泡（Bubbling phase）\n當元素發生事件時，它首先在該元素上運行處理程序，然後在其父層元素往上運行，DOM 傳遞順序是由下到上，直到傳至 document\n<img src=\"https://i.imgur.com/LCmCZtL.png\"></li>\n</ol>\n<h5 id=\"事件處理器（Event-handlers）\" style=\"position:relative;\">事件處理器（Event-handlers）<a href=\"#%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86%E5%99%A8%EF%BC%88Event-handlers%EF%BC%89\" aria-label=\"事件處理器（Event handlers） permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>負責處理事件的程式，通常使用 <code class=\"language-text\">eventTarget.addEventListener()</code> 來連結 HTML 元素，一個元素可以擁有多個事件處理器，而在事件分發期間遇到的每個節點都可以包含事件偵聽器。</p>\n<p>DOM 事件在傳遞時，照前面提到的口訣「先捕獲後冒泡」，傳遞順序會先從根節點開始往下傳遞到 target，再從 target 往上傳遞到 document，我們可以決定在哪個階段去監聽事件。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> target = document.getElementById(</span><span class=\"mtk11\">&#39;id&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">target.addEventListener(eventType, listener)</span></span></span></code></pre>\n<p>那麼要如何設定監聽的階段呢？\n<code class=\"language-text\">.addEventListener</code> 其實還有第三個 options 參數，可以對傳遞順序的改變</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"css\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">True  </span><span class=\"mtk3\">/* 把這個 listener 添加到捕獲階段 (Capture)*/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">False </span><span class=\"mtk3\">/* 把這個 listener 添加到冒泡階段 (Bubble)*/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">null  </span><span class=\"mtk3\">/* 預設，把這個 listener 添加到冒泡階段 (Bubble)*/</span></span></span></code></pre>\n<h4 id=\"幾點注意：\" style=\"position:relative;\">幾點注意：<a href=\"#%E5%B9%BE%E9%BB%9E%E6%B3%A8%E6%84%8F%EF%BC%9A\" aria-label=\"幾點注意： permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>幾乎所有的事件都有冒泡，除了少數事件，如 focus 等</li>\n<li>每一個事件都有一個事件目標</li>\n<li>事件傳到 target 本身，沒有分捕獲與冒泡，會按照程式碼的順序執行</li>\n<li>想知道觸發此事件的元素，可以透過 <code class=\"language-text\">event.target</code> 來取得，這個元素在整個冒泡過程中不會改變，是事件真正的發起者</li>\n<li><code class=\"language-text\">event.target</code> 與 <code class=\"language-text\">event.currentTarget</code> 不同，後者指的是「當前」元素，上面會有一個正在運行的處理程序，註冊事件的主體、監聽事件的人</li>\n</ul>\n<hr>\n</br>\n</br>\n<h4 id=\"Q-什麼是-Event-Delegation，為什麼我們需要它？\" style=\"position:relative;\">Q: 什麼是 Event Delegation，為什麼我們需要它？<a href=\"#Q-%E4%BB%80%E9%BA%BC%E6%98%AF-Event-Delegation%EF%BC%8C%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83%EF%BC%9F\" aria-label=\"Q 什麼是 Event Delegation，為什麼我們需要它？ permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<blockquote>\n<p>A handler on a parent element can always get the details about where it actually happened.</p>\n</blockquote>\n<p>弄清楚了 Event 捕獲和冒泡的傳遞順序及特性後，我們會發現「最上層的元素事件處理器，幾乎可以知道內層元素所有發生的事情，有<strong>相同的綁定事件</strong>會因為「冒泡關係」而一同被觸發，於是就有了「事件委派」的運用：</p>\n<h5 id=\"事件委派\" style=\"position:relative;\">事件委派<a href=\"#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%B4%BE\" aria-label=\"事件委派 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>因為冒泡，可以減少設置監聽器數量的方法，因為內層元素的事件都會觸發到父層元素，我們乾脆直接對父元素進行事件監聽，這樣一來，解決了兩個問題：</p>\n<ul>\n<li>避免沒效率，不再需要個別加上監聽器</li>\n<li>解決了動態生成的元素，其事件綁定的問題</li>\n</ul>\n<p>Event Delegation 的原理，是利用冒泡機制將子節點的事件統一處理，可以透過 <code class=\"language-text\">event.target</code> 屬性來辨別，告訴你觸發的位置，進而確認並執行</p>\n<ol>\n<li>\n<p>利用 switch case 撰寫對應元素的點擊事件，統一管理</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> form = document.querySelector(</span><span class=\"mtk11\">&#39;form&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">form.addEventListener(</span><span class=\"mtk11\">&#39;click&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(e) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">switch</span><span class=\"mtk1\">(e.target.id){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">case</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;btn1&#39;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">/* do something if btn1 click */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">case</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;btn2&#39;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">/* do something if btn2 click */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">case</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;btn3&#39;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">/* do something if btn3 click */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">default</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span></code></pre>\n</li>\n<li>\n<p>同一元素監聽多事件，可以使用 type 屬性</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> btn = document.getElementById(</span><span class=\"mtk11\">&quot;myBtn&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> handler = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (event) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">switch</span><span class=\"mtk1\"> (event.type) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">case</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;click&quot;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     alert(</span><span class=\"mtk11\">&quot;Clicked&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     </span><span class=\"mtk4\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">case</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;mouseover&quot;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     event.target.style.backgroundColor = </span><span class=\"mtk11\">&quot;red&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     bread;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">case</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;mouseout&quot;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     event.target.style.backgroundColor = </span><span class=\"mtk11\">&quot;&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     </span><span class=\"mtk4\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">btn.addEventListener(</span><span class=\"mtk11\">&#39;click&#39;</span><span class=\"mtk1\">, handler)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">btn.addEventListener(</span><span class=\"mtk11\">&#39;mouseenter&#39;</span><span class=\"mtk1\">, handler)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">btn.addEventListener(</span><span class=\"mtk11\">&#39;mouseout&#39;</span><span class=\"mtk1\">, handler)</span></span></span></code></pre>\n</li>\n</ol>\n<h5 id=\"Q-eventpreventDefault-跟-eventstopPropagation-差在哪裡？\" style=\"position:relative;\">Q: event.preventDefault() 跟 event.stopPropagation() 差在哪裡？<a href=\"#Q-eventpreventDefault-%E8%B7%9F-eventstopPropagation-%E5%B7%AE%E5%9C%A8%E5%93%AA%E8%A3%A1%EF%BC%9F\" aria-label=\"Q eventpreventDefault 跟 eventstopPropagation 差在哪裡？ permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ol>\n<li><strong>停止預設行為</strong></li>\n</ol>\n<p>有些元素像是 a 連結，會連結到某個網址，他們本身已經有預設行為，這時候可以利用 event 給的 <code class=\"language-text\">preventDefault</code> 方法來中止預設他們的行為。是取消事件的預設，而不會影響事件傳遞</p>\n<ol start=\"2\">\n<li><strong>停止冒泡</strong></li>\n</ol>\n<p>冒泡事件會從被觸發元素一路向上傳遞到 document，<code class=\"language-text\">event.stopPropagation()</code> 的作用，是在冒泡過程中，能夠決定要不要終止繼續向外冒泡。</p>\n<p>有時候，一個元素上面會被綁定不只一個事件處理器，雖然可以停止向外冒泡，卻沒辦法阻止同層的事件，這時候可以利用 <code class=\"language-text\">e.stopImmediatePropagation</code> 解決，除了停止向外傳遞、也阻止同個元素的其他同層級事件。</p>\n<ul>\n<li>盡量避免使用停止冒泡，不如上層元素沒辦法監聽到下層元素的事件</li>\n</ul>\n<p>preventDefault 是中止元素的預設行為，並不會阻止事件冒泡，依然會繼續傳遞到父層元素，停止冒泡還是要使用 <code class=\"language-text\">e.stopPropagation</code>！</p>\n<h5 id=\"參考資料\" style=\"position:relative;\">參考資料<a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10191970\">重新認識 JavaScript: Day 14 事件機制的原理</a></li>\n<li><a href=\"https://medium.com/@hsien.w.wei/dom-event-propagation-i-%E4%BA%8B%E4%BB%B6%E6%8D%95%E6%8D%89%E5%92%8C%E5%86%92%E6%B3%A1-event-capture-bubble-8214bf146b35\">[DOM] Event Propagation I : 事件捕捉和冒泡</a></li>\n<li><a href=\"https://pjchender.github.io/2017/10/03/js-event-capturing-and-bubbling/\">[JS] Event Capturing and Bubbling</a></li>\n<li><a href=\"https://shubo.io/event-bubbling-event-capturing-event-delegation/\">瀏覽器事件：Event Bubbling, Event Capturing 及 Event Delegation</a></li>\n<li><a href=\"https://medium.com/@realdennis/event-delegation-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%B4%BE%E4%BB%8B%E7%B4%B9-%E8%88%87-%E8%A7%B8%E7%99%BC%E5%A7%94%E6%B4%BE%E7%9A%84%E5%9B%9E%E5%91%BC%E5%87%BD%E6%95%B8-2990921a5ba2\">Event Delegation — 事件委派介紹</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .visual-studio-dark .mtk1 { color: #D4D4D4; }\n  .visual-studio-dark .mtk3 { color: #6A9955; }\n  .visual-studio-dark .mtk4 { color: #569CD6; }\n  .visual-studio-dark .mtk11 { color: #CE9178; }\n  .visual-studio-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#%E4%BA%8B%E4%BB%B6%EF%BC%88event%EF%BC%89\">事件（Event）</a></li>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%EF%BC%88event-flow%EF%BC%89%E3%80%8D\">事件流程（Event Flow）」</a></li>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86%E5%99%A8%EF%BC%88event-handlers%EF%BC%89\">事件處理器（Event-handlers）</a></li>\n</ul>\n</li>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#%E5%B9%BE%E9%BB%9E%E6%B3%A8%E6%84%8F%EF%BC%9A\">幾點注意：</a></li>\n<li>\n<p><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#q-%E4%BB%80%E9%BA%BC%E6%98%AF-event-delegation%EF%BC%8C%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83%EF%BC%9F\">Q: 什麼是 Event Delegation，為什麼我們需要它？</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%B4%BE\">事件委派</a></li>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#q-eventpreventdefault-%E8%B7%9F-eventstoppropagation-%E5%B7%AE%E5%9C%A8%E5%93%AA%E8%A3%A1%EF%BC%9F\">Q: event.preventDefault() 跟 event.stopPropagation() 差在哪裡？</a></li>\n<li><a href=\"/Lidemy/%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E%E6%A9%9F%E5%88%B6/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[第七週] 認識事件傳遞機制","type":"coding","date":"Aug 31, 2020","tags":["Lidemy"],"category":"程式導師計畫","log":null,"thumbnail":null}}},"pageContext":{"slug":"/Lidemy/事件傳遞機制/","previous":{"fields":{"slug":"/Lidemy/什麼是 DOM/"},"frontmatter":{"title":"[第七週] 什麼是 DOM？","tags":["Lidemy"],"date":"2020-08-30","category":"程式導師計畫","mark":null,"description":"提供了一個文件樹的結構化表示法，讓程式可以存取、改變風格和其內容的方法","log":null}},"next":{"fields":{"slug":"/Lidemy/認識 SQL Injection、XSS、CSRF 等攻擊原理及防範方法/"},"frontmatter":{"title":"認識 SQL Injection、XSS、CSRF","tags":["Lidemy"],"date":"2020-10-11","category":"程式導師計畫","mark":null,"description":"了解網頁攻擊原理及其防範方法","log":null}}}},"staticQueryHashes":["63159454"]}