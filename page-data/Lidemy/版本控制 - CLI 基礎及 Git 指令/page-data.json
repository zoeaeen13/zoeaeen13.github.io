{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lidemy/版本控制 - CLI 基礎及 Git 指令/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"88b18e08-7530-5087-a98e-ca5c78ab44b4","excerpt":"對電腦下指令，CLI 是一種操縱電腦的方法，不像 GUI 圖形使用者介面可點擊，是用文字形式 有些功能只能用 Command Line 操作程式，且比較快 Git、執行 JS 連結 server 會用到（因為沒有畫面） 指令 名稱 功能 pwd Print Working…","html":"<p>對電腦下指令，CLI 是一種操縱電腦的方法，不像 GUI 圖形使用者介面可點擊，是用文字形式</p>\n<ul>\n<li>有些功能只能用 Command Line 操作程式，且比較快</li>\n<li>Git、執行 JS</li>\n<li>連結 server 會用到（因為沒有畫面）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>名稱</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pwd</td>\n<td>Print Working Directory</td>\n<td>顯示目前目錄的絕對路徑</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>List</td>\n<td>列出檔案清單</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>Change Directory</td>\n<td>切換資料夾</td>\n</tr>\n<tr>\n<td>cd . .</td>\n<td></td>\n<td><code>cd ..</code>切換到上一層，<code>cd ~</code> home目錄，<code>cd/</code>根目錄</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>Clear</td>\n<td>清除畫面</td>\n</tr>\n<tr>\n<td>touch</td>\n<td></td>\n<td>建立檔案/最後修改時間</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>Clear</td>\n<td>清除畫面</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>Remove</td>\n<td>刪除檔案</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>Remove Directory</td>\n<td>刪除資料夾</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>Move</td>\n<td>移動或改名</td>\n</tr>\n<tr>\n<td>grep</td>\n<td></td>\n<td>抓關鍵字（$grep keyword file）</td>\n</tr>\n<tr>\n<td>echo</td>\n<td></td>\n<td>產生字串</td>\n</tr>\n<tr>\n<td>cat</td>\n<td>Catenate</td>\n<td>顯示檔案內容</td>\n</tr>\n<tr>\n<td>less</td>\n<td></td>\n<td>分頁顯示檔案內容</td>\n</tr>\n</tbody>\n</table>\n<h3>💡 <strong>mv</strong></h3>\n<ol>\n<li>移動\n可以使用相對路徑（同一資料夾底下）或絕對路徑（/）</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$mv happy.txt today    //把 happy.txt 移到 today 資料夾</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$mv happy.txt ..       //把 happy.txt 移到上一層</span></span></span></code></pre>\n<ol start=\"2\">\n<li>改名\n可以想像成是 happy.txt 內容，移動到 sad 檔案下，原來的自動消失</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$mv happy.txt sad     //把 happy.txt 改名成 sad 檔案</span></span></span></code></pre>\n<h3>💡 <strong>Vim 操作</strong></h3>\n<ul>\n<li>參考 <a href=\"https://gitbook.tw/chapters/command-line/vim-introduction.html\">超簡明 Vim 操作介紹</a></li>\n<li><code>i</code> -> 進入輸入模式</li>\n<li><code>esc</code> -> 一般模式，無法輸入文字，能複製、貼上、存檔或離開</li>\n<li><code>:wq</code> 存檔離開</li>\n<li>常用來<strong>編輯 Commit 訊息</strong></li>\n</ul>\n<p><img src=\"https://i.imgur.com/s3Kool3.png\"></p>\n<h2>組合指令</h2>\n<ul>\n<li>pipe：將前面印出來的東西，交給 grep hi 這個指令（|）</li>\n</ul>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cat file.txt | grep hi</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">//假設 cat file.txt 印出了 123hihi，輸入&quot;123hihi&quot;, grep hi</span></span></span></code></pre>\n<ul>\n<li>Redirect：重新導向（>），把 file.md 的內容輸入到另一個檔案</li>\n</ul>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">echo file.md &gt; print.txt</span></span></span></code></pre>\n<hr>\n<h1>Git</h1>\n<p>用來做<strong>版本控制</strong>。一般人做版本控制都是以「檔案」為單位，例如複製貼上，<strong>不直觀</strong>，因為寫程式時，需要知道程式碼誰寫的、什麼時候改的、為什麼要改這行</p>\n<ul>\n<li>希望每一個版本被保存起來，檔案多了要管理</li>\n<li>在軟體開發常用</li>\n<li>透過 commit message 可以看到以前的歷史紀錄、和上一版差異</li>\n<li>分支功能 branch -> 協作、新功能</li>\n<li>主分支 master -> 要保持穩定</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Windows</th>\n<th>指令</th>\n<th>操作</th>\n<th>備註說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git init</td>\n<td>初始化目錄</td>\n<td></td>\n<td>開始版控，建立 <code>.git</code> 目錄，所有版控記錄都會在裡面</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查詢狀態</td>\n<td></td>\n<td>查詢確認當前檔案的狀況</td>\n</tr>\n<tr>\n<td>git add</td>\n<td>加入版控追蹤</td>\n<td>git add +<code>檔名</code></td>\n<td>追蹤檔案加入至暫存區，從工作目錄加入至 staging</td>\n</tr>\n<tr>\n<td><a href=\"https://git-scm.com/docs/git-commit\">git commit</a></td>\n<td>創建一新版本</td>\n<td>git commit -m \"訊息\"</td>\n<td>新版本及 commit message</td>\n</tr>\n<tr>\n<td>git log</td>\n<td>檢視 Commit 紀錄</td>\n<td></td>\n<td>可加 <code>--oneline</code> 簡短一行查看</td>\n</tr>\n<tr>\n<td>git diff</td>\n<td>查看差異</td>\n<td></td>\n<td>查看本次與上一回的差異</td>\n</tr>\n<tr>\n<td>git checkout</td>\n<td>回到某次 Commit 紀錄</td>\n<td>git checkout + <code>分支亂碼</code></td>\n<td>git checkout master 回到最新狀態</td>\n</tr>\n<tr>\n<td>.gitignore</td>\n<td>忽略</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>一些 Git 問題</p>\n</blockquote>\n<h3>Q: 開始進行版控？</h3>\n<ul>\n<li><code>git init</code> 會在資料夾建立一個 .git 目錄，整個版控的精華就在這裡面</li>\n<li>空的目錄是無法被提交的，因為 Git 在計算、產生物件的時候，是根據「檔案變化的內容」去做計算的，內容不可以為空</li>\n</ul>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git  init</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Initialized empty Git repository</span></span></span></code></pre>\n<h3>Q: 版控的流程，暫存區和儲存區？</h3>\n<p>用來查詢現在這個目錄的「狀態」</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git status</span></span></span></code></pre>\n<p>新增一個檔案會是 Untracked 狀態，一旦下面這個指令</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git add X.html</span></span></span></code></pre>\n<p>開始追蹤此檔案，變成 new file 狀態。表示這個檔案已經被安置到暫存區（Staging Area），暫存區也稱之索引（index）</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">//萬用字元*，把所有附檔名是 html 的檔案全部都加到暫存區</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git add *.html</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">//加入全部</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git add --all 或 git add .</span></span></span></code></pre>\n<h3>Q: 到底 git add --all 和 git add . 指令差別在？</h3>\n<p>差別在於，使用 Git 版本不同以及<strong>執行指令的目錄位置</strong>，後者只將當前目錄的所有檔案和子目錄內的檔案變更加入，前者是無論目前處於哪一層目錄，專案裡所有的異動都會被加至暫存區</p>\n<h3>Q: 如果在 git add 之後又修改了那個檔案？</h3>\n<p>編輯內容並沒有再次被加到暫存區，得再次使用 git add 指令加至暫存區</p>\n<h3>Q: 存放到儲存區（Repository）？</h3>\n<p>要完成 commit 指令才算是完成整個流程，而 commit 都只會處理暫存區（Staging Area）裡的內容</p>\n<ul>\n<li>加參數 <code>-m</code> 訊息，則不用進入 VIM 就能 commit\n不小心跳入 VIM 視窗的話，參考<a href=\"https://gitbook.tw/chapters/command-line/vim-introduction.html\">簡易操作Vim</a></li>\n<li>預設一定要輸入訊息才能 commit，如不想輸入訊息可加上 <code>--allow-empty-message</code> 參數(通常不會這樣做)</li>\n<li><code>git add -am \"message\"</code> 合併 <code>git add</code> 和 <code>git commit</code> 兩個指令</li>\n</ul>\n<h3>Q: 如何刪除檔案？</h3>\n<p>在 Git 裡，不管是刪除檔案或是變更檔名，對 Git 來說都是一種「修改」</p>\n<ol>\n<li>系統指令 <code>rm</code>，刪除檔案 X.html</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ rm X.html</span></span></span></code></pre>\n<p>查看會發現該檔案狀態為「deleted」，還需要把這次修改再加到暫存區</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">On branch master</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Changes not staged for commit:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\tdeleted:    X.html</span></span></span></code></pre>\n<ol start=\"2\">\n<li>使用 <code>git rm</code> 指令，讓 Git 幫你完成，完成後直接在暫存區了，不需要再自己 add 一次</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git rm X.html</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">rm &#39;X.html&#39;</span></span></span></code></pre>\n<ol start=\"3\">\n<li>加上 <code>–cached</code> 參數\n隱藏忽略的意思，把檔案從 Git 目錄移除，不再追蹤(非刪除)，因為系統的 <code>rm</code> 或是 <code>git rm</code> 指令，都會真的把這個檔案從工作目錄裡刪掉，如果只是想解除版控，可以加上這個參數</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git rm X.html --cached</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">rm &#39;X.html&#39;</span></span></span></code></pre>\n<p>X.html 的狀態從原本已經在目錄裡的 tracked 變成 Untracked 了</p>\n<h3>Q: 什麼時候應該要 Commit？</h3>\n<ul>\n<li>完成一個「任務」的時候</li>\n<li>下班的時候，可能還沒完全搞定任務，但至少先 Commit 今天進度，除了備份之外，也讓公司知道你今天有在努力工作(?)</li>\n<li>你想要 Commit 的時候就可以</li>\n<li>盡量細切 commit，把每個小功能做一次 commit</li>\n</ul>\n<h3>Q: 更改 Commit 紀錄，使用 <code>--amend</code> 參數</h3>\n<p>修改近期一次的 Commit Message\n改訊息就是修改了一次的歷史，<strong>盡量不要在已經 Push 出去之後再修改</strong>，可能會造成其它協作者困擾</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git commit --amend -m &quot;NEW Message&quot;</span></span></span></code></pre>\n<p>把單一檔案追加到最後一次的 Commit，<code>--no-edit</code> 是指「我不要編輯 Commit 訊息」，所以就不會跳出 Vim 編輯器的視窗</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git commit --amend --no-edit</span></span></span></code></pre>\n<h3>Q: 用 git log 查詢 commit</h3>\n<p>查詢某些人的 Commit，例如協作者名為「Meng」</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git log --oneline --author=&quot;Meng22&quot;</span></span></span></code></pre>\n<p>搜尋包含某文字的 commit：查詢 Commit 訊息有\"hahaha\"</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git log --oneline --grep=&quot;hahaha&quot;</span></span></span></code></pre>\n<h3>Q: 如何邊緣某些檔案</h3>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">touch .gitignore   建立 .gitignore 檔案</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">vim .gitignore     編輯內容，哪些檔案不要放進版本控制</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">---</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">忽略名為text的檔案(檔名)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">text.txt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">*.log*  忽略</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">*.swp   忽略暫存檔</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">忽略 config 目錄下的 database.yml 檔案</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">config/database.yml</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">忽略所有 db 目錄下附檔名是 .sqlite3 的檔案</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">/db/*.sqlite3</span></span></span></code></pre>\n<h3>Q: 拿到一個新專案的步驟</h3>\n<ol>\n<li>加入版本控制 git init</li>\n<li>建立 .gitignore 排除需要忽略的檔案，.gitignore 檔案也需要加入版控（其他協作者才知道）</li>\n<li>用 <code>git add .</code> 加入檔案，因為是新增的檔案，不能直接用<code>git comiit -am</code> （他們還不在 staging 區）</li>\n<li>但如果是已經加入過、修改的檔案，可直接用上面那個合併指令</li>\n</ol>\n<h2>認識 branch</h2>\n<p>在增加新功能、修正 Bug，或是想試一些新做法時，都可以另外做一個分支來進行，待做完確認沒問題之後再合併回來，不會影響正在運行的功能</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git branch　　      //印出目前這個專案有哪些分支</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  dog          　　   //* 表示在哪個分支上</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* master</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git branch -v      //參數-v，意思是--no-abbrev</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  dog    f95a13f init</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* master f95a13f init</span></span></span></code></pre>\n<p><strong>新增分支 cat</strong></p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch cat    //新增分支cat</span></span></span></code></pre>\n<p><strong>分支改名</strong></p>\n<p>完全不會影響檔案或目錄，使用的是 <code>-m</code>參數，把分支名稱由 cat 改成 tiger（master 想改名也可以改喔）</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch -m cat tiger</span></span></span></code></pre>\n<p><strong>刪除分支</strong></p>\n<p>使用 <code>-d</code> 參數來刪除</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch -d tiger</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Deleted branch tiger (was 08a6af4).</span></span></span></code></pre>\n<p><strong>合併分支</strong>\n切回主要分支(master)，輸入你要合併的分支名稱。所謂的 merge 並非真的指合併分支，合併是<strong>合併「該分支所指向的那些 Commit」</strong></p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git merge tiger</span></span></span></code></pre>\n<h3>Q: Merge 合併時發生衝突（Conflict）</h3>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git merge bear</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">CONFLICT (add/add): Merge conflict in .gitignore</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Auto-merging .gitignore</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Automatic merge failed; fix conflicts and then commit the result.</span></span></span></code></pre>\n<p>這時候用 <code>git status</code> 查看，會看到 Unmerged paths</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">You have unmerged paths.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Unmerged paths:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (use &quot;git add </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">file</span><span class=\"mtk17\">&gt;</span><span class=\"mtk1\">...&quot; to mark resolution)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span></code></pre>\n<p>這時候需要人工手動修改（可使用 vim 介面），Git 已經把有衝突的段落標記出來</p>\n<ul>\n<li>上半部是 HEAD（>>>>>）也就是目前所在的主分支</li>\n<li>中間用分隔線（======）區別</li>\n<li>下面是被合併分支的內容（&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;）</li>\n</ul>\n<p>修改完之後把檔案加到暫存區，再 Commit</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Changes not staged for commit:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    modified:   .gitignore</span></span></span></code></pre>\n<h3>Q: 我剛剛 Commit 了，但我想要拿掉！</h3>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git reset</span></span></span></code></pre>\n<p>很多人誤會是重新設定，但 Reset 指令比較像是「前往」或「變成」</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset HEAD~2  //我要變成兩個 Commit 之前的狀態</span></span></span></code></pre>\n<p>很難理解嗎？\n假設 HEAD 和 MASTER 目前都是指向 <code>e12d8ef</code> 這個 Commit 上</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"html\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset e12d8ef^  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset master^</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset HEAD^     </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">//^代表前次，這些都是同個意思，表示回到前一次Commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset e12d8ef^^  //往前兩次</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset e12d8ef~5  //往前五次</span></span></span></code></pre>\n<p>Reset 指令可以搭配參數使用，有三種模式：</p>\n<ul>\n<li><code>--mixed</code>\n預設，把暫存區的檔案丟掉，但不會動到工作目錄的檔案</li>\n<li><code>--soft</code>\n工作目錄跟暫存區的檔案都不會被丟掉，所以看起來就只有 HEAD 的移動</li>\n<li><code>--hard</code>\n工作目錄和暫存區的檔案都會丟掉。</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk17 { color: #808080; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#-mv\">💡 <strong>mv</strong></a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#-vim-%E6%93%8D%E4%BD%9C\">💡 <strong>Vim 操作</strong></a></li>\n</ul>\n</li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#%E7%B5%84%E5%90%88%E6%8C%87%E4%BB%A4\">組合指令</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#git\">Git</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E7%89%88%E6%8E%A7%EF%BC%9F\">Q: 開始進行版控？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E7%89%88%E6%8E%A7%E7%9A%84%E6%B5%81%E7%A8%8B%EF%BC%8C%E6%9A%AB%E5%AD%98%E5%8D%80%E5%92%8C%E5%84%B2%E5%AD%98%E5%8D%80%EF%BC%9F\">Q: 版控的流程，暫存區和儲存區？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E5%88%B0%E5%BA%95-git-add---all-%E5%92%8C-git-add--%E6%8C%87%E4%BB%A4%E5%B7%AE%E5%88%A5%E5%9C%A8%EF%BC%9F\">Q: 到底 git add --all 和 git add . 指令差別在？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E5%A6%82%E6%9E%9C%E5%9C%A8-git-add-%E4%B9%8B%E5%BE%8C%E5%8F%88%E4%BF%AE%E6%94%B9%E4%BA%86%E9%82%A3%E5%80%8B%E6%AA%94%E6%A1%88%EF%BC%9F\">Q: 如果在 git add 之後又修改了那個檔案？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E5%AD%98%E6%94%BE%E5%88%B0%E5%84%B2%E5%AD%98%E5%8D%80%EF%BC%88repository%EF%BC%89%EF%BC%9F\">Q: 存放到儲存區（Repository）？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E5%A6%82%E4%BD%95%E5%88%AA%E9%99%A4%E6%AA%94%E6%A1%88%EF%BC%9F\">Q: 如何刪除檔案？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E4%BB%80%E9%BA%BC%E6%99%82%E5%80%99%E6%87%89%E8%A9%B2%E8%A6%81-commit%EF%BC%9F\">Q: 什麼時候應該要 Commit？</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E6%9B%B4%E6%94%B9-commit-%E7%B4%80%E9%8C%84%EF%BC%8C%E4%BD%BF%E7%94%A8---amend-%E5%8F%83%E6%95%B8\">Q: 更改 Commit 紀錄，使用 <code>--amend</code> 參數</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E7%94%A8-git-log-%E6%9F%A5%E8%A9%A2-commit\">Q: 用 git log 查詢 commit</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E5%A6%82%E4%BD%95%E9%82%8A%E7%B7%A3%E6%9F%90%E4%BA%9B%E6%AA%94%E6%A1%88\">Q: 如何邊緣某些檔案</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E6%8B%BF%E5%88%B0%E4%B8%80%E5%80%8B%E6%96%B0%E5%B0%88%E6%A1%88%E7%9A%84%E6%AD%A5%E9%A9%9F\">Q: 拿到一個新專案的步驟</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#%E8%AA%8D%E8%AD%98-branch\">認識 branch</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-merge-%E5%90%88%E4%BD%B5%E6%99%82%E7%99%BC%E7%94%9F%E8%A1%9D%E7%AA%81%EF%BC%88conflict%EF%BC%89\">Q: Merge 合併時發生衝突（Conflict）</a></li>\n<li><a href=\"/Lidemy/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%20-%20CLI%20%E5%9F%BA%E7%A4%8E%E5%8F%8A%20Git%20%E6%8C%87%E4%BB%A4/#q-%E6%88%91%E5%89%9B%E5%89%9B-commit-%E4%BA%86%EF%BC%8C%E4%BD%86%E6%88%91%E6%83%B3%E8%A6%81%E6%8B%BF%E6%8E%89%EF%BC%81\">Q: 我剛剛 Commit 了，但我想要拿掉！</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Command Line 及 git 指令","date":"Jun 05, 2020","tags":["git","Lidemy"],"category":"程式導師計畫","thumbnail":null}}},"pageContext":{"slug":"/Lidemy/版本控制 - CLI 基礎及 Git 指令/","previous":{"fields":{"slug":"/Lidemy/Git 遠端協作及 Pull Request 介紹/"},"frontmatter":{"title":"Git 協作及 Pull Request 介紹","tags":["git","Lidemy"],"date":"2020-06-05","category":"程式導師計畫","mark":null,"description":"發 PR 流程及遠端協作關係"}},"next":{"fields":{"slug":"/Lidemy/初識 JavaScript、變數及運算子/"},"frontmatter":{"title":"初識 JavaScript","tags":["JavaScript","Lidemy"],"date":"2020-07-03","category":"程式導師計畫","mark":null,"description":"JavaScript 基本觀念、變數及運算子"}}}},"staticQueryHashes":["63159454"]}