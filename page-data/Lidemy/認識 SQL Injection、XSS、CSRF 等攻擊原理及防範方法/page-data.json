{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lidemy/認識 SQL Injection、XSS、CSRF 等攻擊原理及防範方法/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"279285ff-582d-59d4-943c-79b80b1500da","excerpt":"1. SQL Injection 的攻擊原理以及防範方法 又稱 SQL 隱碼或 SQL 注碼，發生於應用程式與資料庫層的安全漏洞。\n簡單來說，利用在輸入的字串之中夾帶 SQL 指令，因程式設計者忽略了字元檢查，這些夾帶進去的惡意指令就會被資料庫伺服器誤認為是正常的 SQL…","html":"<h3 id=\"1-SQL-Injection-的攻擊原理以及防範方法\" style=\"position:relative;\">1. SQL Injection 的攻擊原理以及防範方法<a href=\"#1-SQL-Injection-%E7%9A%84%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95\" aria-label=\"1 SQL Injection 的攻擊原理以及防範方法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>又稱 SQL 隱碼或 SQL 注碼，發生於應用程式與資料庫層的安全漏洞。\n簡單來說，利用在輸入的字串之中夾帶 SQL 指令，因程式設計者<strong>忽略了字元檢查</strong>，這些夾帶進去的惡意指令就會被資料庫伺服器誤認為是正常的 SQL 指令而執行，因此資料庫遭到破壞，讓攻擊者有了擅自竊取、修改、挪動或刪除資料的可能：</p>\n<ul>\n<li>未過濾惡意程式碼的情況</li>\n<li>透過更改語法邏輯或加入特殊指令的方式</li>\n</ul>\n<h4 id=\"常見攻擊手法\" style=\"position:relative;\">常見攻擊手法<a href=\"#%E5%B8%B8%E8%A6%8B%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95\" aria-label=\"常見攻擊手法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ol>\n<li>略過權限檢查（Authorization Bypass）</li>\n</ol>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"sql\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">// 原本</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">SELECT</span><span class=\"mtk1\"> * </span><span class=\"mtk4\">FROM</span><span class=\"mtk1\"> users </span><span class=\"mtk4\">WHERE</span><span class=\"mtk1\"> </span><span class=\"mtk4\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">&#39;name&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AND</span><span class=\"mtk1\"> </span><span class=\"mtk4\">password</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">&#39;password&#39;</span></span></span></code></pre>\n<p>以註冊登入為例，當有兩個輸入框要求使用者登入帳號密碼，在取得輸入框的值，給後端去驗證，攻擊者可以輸入<code class=\"language-text\">&#39;OR 1=1 --</code> 來繞開這關程序 =><code class=\"language-text\">&#39;</code> 讓輸入框內容關閉、<code class=\"language-text\">OR 1=1</code> 讓條件恆正、<code class=\"language-text\">--</code> 註解掉後面的程式碼，如此一來就登入資料庫了</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"php\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">&quot;</span><span class=\"mtk4\">SELECT</span><span class=\"mtk11\"> </span><span class=\"mtk1\">*</span><span class=\"mtk11\"> </span><span class=\"mtk4\">FROM</span><span class=\"mtk11\"> customers </span><span class=\"mtk4\">WHERE</span><span class=\"mtk11\"> </span><span class=\"mtk4\">name</span><span class=\"mtk11\"> </span><span class=\"mtk1\">=</span><span class=\"mtk11\">&#39;&#39;</span><span class=\"mtk4\">OR</span><span class=\"mtk11\"> </span><span class=\"mtk5\">1</span><span class=\"mtk1\">=</span><span class=\"mtk5\">1</span><span class=\"mtk11\"> </span><span class=\"mtk3\">--AND password = &#39; -password-&#39; </span></span></span></code></pre>\n<ol start=\"2\">\n<li>注入惡意的 SQL 的語法</li>\n</ol>\n<p>攻擊者可以在注入惡意的 SQL 的語法去改變資料庫，或進一步探查其他 table 中的資料，造成個人機密資料、伺服器被攻擊，系統管理員帳戶被竄改等等</p>\n<p><strong>SQL Injection，就是駭客透過修改 SQL 語句，改變他的語意，達成竊取資料/破壞資料的行為</strong></p>\n<h4 id=\"如何避免\" style=\"position:relative;\">如何避免<a href=\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D\" aria-label=\"如何避免 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ol>\n<li>過瀘字串「‘」或「“」</li>\n<li>限制輸入字元格式並檢查輸入長度、資料格式</li>\n<li>資料庫設定使用者帳號權限，限制非特定使用者無法作資料庫存取</li>\n<li>mysql<em>real</em>eascape_string() 處理（老方法不建議）</li>\n<li>PDO 防止注入，預處理</li>\n</ol>\n<h4 id=\"筆記：Prepared-Statements-預處理語句\" style=\"position:relative;\">筆記：Prepared Statements 預處理語句<a href=\"#%E7%AD%86%E8%A8%98%EF%BC%9APrepared-Statements-%E9%A0%90%E8%99%95%E7%90%86%E8%AA%9E%E5%8F%A5\" aria-label=\"筆記：Prepared Statements 預處理語句 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Prepared Statements 方式，是運用<strong>預處理</strong>的概念來解決這個問題。\n以往的傳統寫法是在程式裡拼接，再發送到 Mysql 中，後者沒辦法對傳入的東西判斷是否正常，但是當我們先發送一份模板到 Mysql Server 做預處理，再傳參數過去，之後不管怎麼注入什麼，Mysql Server 都知道是變量。</p>\n<p>透過編譯 SQL 模板來執行 SQL 指令，能提高 SQL 語句的效能，並且有效阻止 SQL 隱碼攻擊</p>\n<ol>\n<li>先將 sql 語句模板發送給 Mysql Server</li>\n<li>再將要塞入的變數發送給 Mysql server</li>\n<li>轉譯是在 Mysql Server 做的，而不是本地</li>\n</ol>\n<p>預處理分成兩種方法：mysqli 和 PDO</p>\n<ul>\n<li>方法一：<code class=\"language-text\">mysqli:prepare()</code></li>\n</ul>\n<p>先寫出 $sql 語句，用 <code class=\"language-text\">?</code> 占位符代替變量，之後按照順序加入變數的值執行</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"php\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$stmt = $conn-&gt;prepare(</span><span class=\"mtk11\">&#39;</span><span class=\"mtk4\">SELECT</span><span class=\"mtk11\"> </span><span class=\"mtk1\">*</span><span class=\"mtk11\"> </span><span class=\"mtk4\">FROM</span><span class=\"mtk11\"> employees </span><span class=\"mtk4\">WHERE</span><span class=\"mtk11\"> </span><span class=\"mtk4\">name</span><span class=\"mtk11\"> </span><span class=\"mtk1\">=</span><span class=\"mtk11\"> ? </span><span class=\"mtk4\">AND</span><span class=\"mtk11\"> id </span><span class=\"mtk1\">=</span><span class=\"mtk11\"> ?&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$stmt-&gt;bind_param(</span><span class=\"mtk11\">&#39;si&#39;</span><span class=\"mtk1\">, $name, $id);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$stmt-&gt;execute();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$result = $stmt-&gt;get_result();</span></span></span></code></pre>\n<ul>\n<li>方法二：PDO</li>\n</ul>\n<p>使用原理和上面差不多，通過指定參數（像 <code class=\"language-text\">:name</code> 這樣的命名參數）告訴 Mysql Server 你想過濾它，接著調用 execute() 函數時，prepared statements 會和你剛才指定的參數值結合</p>\n<blockquote>\n<p>設置 PDO 處理器： <strong>ATTR<em>EMULATE</em>PREPARES</strong></p>\n<ul>\n<li>ATTR<em>EMULATE</em>PREPARES = true（默認情況）\n對指定的字元集以輸入參數進行本地轉義，然後拼接成完整的 SQL 語句，發送給MySQL Server，類似於我們原本的程式拼接再執行的模式，但老版本並不支援在 DSN 中定義 charset 屬性，仍可能導致 SQL 注入</li>\n<li>ATTR<em>EMULATE</em>PREPARES = false\nsql 會分兩次把參數給送給 Mysql，Mysql 根據自身字元集（set names）進行處理</li>\n</ul>\n</blockquote>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"php\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$pdo = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> PDO(</span><span class=\"mtk11\">&#39;mysql:dbname=dbtest;host=127.0.0.1;charset=utf8&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;user&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;pass&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$pdo-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);   </span><span class=\"mtk3\">//必須設</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$stmt = $pdo-&gt;prepare(</span><span class=\"mtk11\">&#39;</span><span class=\"mtk4\">SELECT</span><span class=\"mtk11\"> </span><span class=\"mtk1\">*</span><span class=\"mtk11\"> </span><span class=\"mtk4\">FROM</span><span class=\"mtk11\"> employees </span><span class=\"mtk4\">WHERE</span><span class=\"mtk11\"> </span><span class=\"mtk4\">name</span><span class=\"mtk11\"> </span><span class=\"mtk1\">=</span><span class=\"mtk11\"> :</span><span class=\"mtk4\">name</span><span class=\"mtk11\">&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$stmt-&gt;execute(array(</span><span class=\"mtk11\">&#39;:name&#39;</span><span class=\"mtk1\"> =&gt; $name));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">foreach</span><span class=\"mtk1\"> ($stmt as $row) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do something with $row</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<hr>\n<h3 id=\"請說明-XSS-的攻擊原理以及防範方法\" style=\"position:relative;\">請說明 XSS 的攻擊原理以及防範方法<a href=\"#%E8%AB%8B%E8%AA%AA%E6%98%8E-XSS-%E7%9A%84%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95\" aria-label=\"請說明 XSS 的攻擊原理以及防範方法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>XSS，又稱跨網域攻擊（Cross-Site Scripting），我們都知道可以寫在網頁裡，讓瀏覽器執行的一種程式碼稱為 JavaScript，只要使用 &#x3C;<code class=\"language-text\">script</code>> 標籤，就可以在裡面撰寫一些 JavaScript 程式碼，讓網頁具有動態、互動的效果，但是</p>\n<ul>\n<li>Stored XSS（儲存型）\n有使用者可以輸入任意內容的地方，如果沒有確實檢查，一旦鑽漏洞輸入如 &#x3C;<code class=\"language-text\">script</code>> 等關鍵字就會被當成正常的 HTML 執行，標籤內容也會被視為正常內容而<strong>保存在資料庫</strong>，這種類型就是 Stored XSS</li>\n<li>Reflected XSS（反射型）\n由網頁後端直接嵌入由前端使用者所傳送過來的內容造成的，最常見的就是以 <strong>GET 方法</strong>傳送資料給伺服器時，後端沒有過濾掉惡意字元，就直接將內容回應到網頁上</li>\n</ul>\n<blockquote>\n<p>需透過特定網址點入，通常會以釣魚手法誘騙受害者點入連結，但因為程式碼就在網址上，細心一點就不容易受騙</p>\n</blockquote>\n<ul>\n<li>DOM-Based XSS（基於 DOM 的類型）\nDOM 是描述 HTML 文件的表示法，也就是我們常看到的、可以使用 JS 動態產生網頁，而不必透過伺服器</li>\n</ul>\n<h4 id=\"如何防範\" style=\"position:relative;\">如何防範<a href=\"#%E5%A6%82%E4%BD%95%E9%98%B2%E7%AF%84\" aria-label=\"如何防範 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<h5 id=\"1-儲存型和反射型\" style=\"position:relative;\">1. 儲存型和反射型<a href=\"#1-%E5%84%B2%E5%AD%98%E5%9E%8B%E5%92%8C%E5%8F%8D%E5%B0%84%E5%9E%8B\" aria-label=\"1 儲存型和反射型 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li>PHP htmlspecialchars 函數：轉換HTML 特殊符號為僅能顯示用的編碼</li>\n</ul>\n<p>前兩種 Stored、Reflected 由後端進行防範，使用者輸入的內容都需要經過檢查，比如刪除 &#x3C;<code class=\"language-text\">script</code>>、<code class=\"language-text\">onerror=</code> 及其他任何可能執行程式碼的字串，或改為純文字顯示，替換字元即可</p>\n<h5 id=\"2-DOM-Based-防範\" style=\"position:relative;\">2. DOM-Based 防範<a href=\"#2-DOM-Based-%E9%98%B2%E7%AF%84\" aria-label=\"2 DOM Based 防範 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>由前端來防範，選擇正確的方法和屬性來動態操作 DOM，比如將底下 innerHTML 改為 innerText，因為如果 name 插入 HTML 字串，將會被解析成 DOM 物件</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">document.getElementById(</span><span class=\"mtk11\">&#39;show_name&#39;</span><span class=\"mtk1\">).innerHTML = name;</span></span></span></code></pre>\n<hr>\n<h3 id=\"請說明-CSRF-的攻擊原理以及防範方法\" style=\"position:relative;\">請說明 CSRF 的攻擊原理以及防範方法<a href=\"#%E8%AB%8B%E8%AA%AA%E6%98%8E-CSRF-%E7%9A%84%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95\" aria-label=\"請說明 CSRF 的攻擊原理以及防範方法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>CSRF，跨站請求偽造（Cross Site Request Forgery），通過一些技術手段欺騙用戶的瀏覽器，去存取一個自己<strong>曾經認證過的網站</strong>並執行一些操作，如發送郵件、發訊息、甚至財產操作如轉帳和購買商品。</p>\n<p>由於瀏覽器曾經認證過，所以被存取的網站會認為是真正的用戶操作而執行，只能說保證請求發自某個用戶的瀏覽器，卻<strong>不能保證請求本身是用戶自願發出</strong>。</p>\n<blockquote>\n<h4 id=\"案例\" style=\"position:relative;\">案例<a href=\"#%E6%A1%88%E4%BE%8B\" aria-label=\"案例 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n</blockquote>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"html\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">一家銀行用以執行轉帳操作的URL位址：</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">https://bank.example.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">惡意攻擊者可以在另一個網站上放置如下：</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk13\">&lt;</span><span class=\"mtk4\">img</span><span class=\"mtk1\"> </span><span class=\"mtk8\">src</span><span class=\"mtk1\">=</span><span class=\"mtk11\">&quot;https://bank.example.com/withdraw?account=Alice&amp;amount=100&amp;for=Badman&quot;</span><span class=\"mtk13\">/&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">如用戶名 Alice 存取了惡意站點，而她之前剛認證過不久，登入資訊尚未過期，那麼她就會被扣款。</span></span></span></code></pre>\n<p>這種惡意網址形式多樣，藏在網頁的許多地方，也不一定要是攻擊者實際控制的網站，可以放在論壇、部落格等任何用戶生成內容的網站中，即使用戶是存取熟悉的可信網站，也有可能有受攻擊的危險。</p>\n<p>CSRF 無法獲取用戶的帳戶控制權，也不能直接竊取用戶的任何資訊，但他們能做到的，是欺騙用戶的瀏覽器、讓其以用戶的名義執行操作。</p>\n<h4 id=\"Server-的防禦\" style=\"position:relative;\">Server 的防禦<a href=\"#Server-%E7%9A%84%E9%98%B2%E7%A6%A6\" aria-label=\"Server 的防禦 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>因為是在不同的 domain 底下卻能夠偽造出「使用者本人發出的 request」，CSRF 的核心概念是「Cross Site Request」，因此可以思考 => <strong>如何擋掉從別的 domain 來的請求？</strong></p>\n<ol>\n<li><strong>檢查 Referer 欄位</strong></li>\n</ol>\n<p>request 的 header 裡面會帶一個欄位叫做 referer，代表這個 request 是從哪個地方過來的（請求來源的位址），可以檢查這個欄位看是不是合法的 domain，不是的話直接檔下即可，但這個方法不夠完善的原因是</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"html\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* 有些瀏覽器可能不會帶 referer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* 有些使用者可能會關閉自動帶 referer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* 判定是不是合法 domain 的程式碼可能不夠完善</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* Referer 欄位被竄改的可能</span></span></span></code></pre>\n<ol start=\"2\">\n<li><strong>加上圖形驗證碼、簡訊驗證碼</strong></li>\n</ol>\n<p>比如網路銀行轉帳時，需要收簡訊驗證碼進行驗證，確保不會被 CSRF 攻擊，但因為很麻煩，往往用在需安全性高的操作上</p>\n<ol start=\"3\">\n<li><strong>校驗 token</strong></li>\n</ol>\n<p>防止 CSRF 攻擊，只要確保有些資訊「只有使用者知道」即可，要求在存取敏感數據請求時，用戶瀏覽器提供不儲存在 cookie 中，並且攻擊者無法偽造的數據作為校驗，那麼攻擊者就無法再執行 CSRF 攻擊，校驗 token 值為空或者錯誤時，就拒絕這個可疑的請求。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"html\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* Server 端生成的，在 form 裡面加上一個 hidden 的欄位，叫做 CSRF token，裡面填的值由 server 隨機產生，並且存在 server 中</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* Server 端生成的，一樣在 form 放 CSRF token，但這次參照值不是存在 Server 裡，而是存在 cookie 裡</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">* Client 端生成的，有些套件（axios）可以設定好 header 和 cookie 的值，之後每一個 request 會自動添加上去</span></span></span></code></pre>\n<ol start=\"4\">\n<li><strong>瀏覽器本身的防禦：SameSite cookie</strong></li>\n</ol>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"php\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Set-Cookie: session_id=ewfewjf23o1; SameSite</span></span></span></code></pre>\n<ul>\n<li>Strict（默認 SameSite=Strict）\n完全禁止第三方 Cookie，跨網站請求时，任何情况下都不會發送 Cookie。</li>\n</ul>\n<p>換句話說，只有和當前網頁的URL一致，才會帶上 Cookie。如果只允許 same site 使用，不應該在任何的 cross site request 被加上去，像是 <code class=\"language-text\">&lt;a href=&quot;&quot;&gt;</code>、<code class=\"language-text\">&lt;form&gt;</code> 等，從 Google 搜尋結果或其他連結點進某個網站的時候，因為不會帶 cookie 的關係，所以那個網站就會變成是登出狀態，造成不好的使用者體驗。</p>\n<ul>\n<li>Lax\n多數情況也是不發送第三方 Cookie，不過像 <code class=\"language-text\">&lt;a&gt;</code>、<code class=\"language-text\">&lt;link rel=&quot;prerender&quot;&gt;</code>、<code class=\"language-text\">&lt;form method=&quot;GET&quot;</code>>` 這些還是會帶上 cookie，比較彈性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>請求類型</th>\n<th>範例</th>\n<th>一般情況</th>\n<th>Lax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a 連結</td>\n<td><code class=\"language-text\">&lt;a href=&quot;...&gt;</code></td>\n<td>發送 cookie</td>\n<td>發送 cookie</td>\n</tr>\n<tr>\n<td>link 連結</td>\n<td><code class=\"language-text\">&lt;link rel=&quot;prerender&quot; href=&quot;...&gt;</code></td>\n<td>發送 cookie</td>\n<td>發送 cookie</td>\n</tr>\n<tr>\n<td>GET 請求</td>\n<td><code class=\"language-text\">&lt;form method=&quot;GET&quot; action=&quot;...&quot;&gt;</code></td>\n<td>發送 cookie</td>\n<td>發送 cookie</td>\n</tr>\n<tr>\n<td>POST 請求</td>\n<td><code class=\"language-text\">&lt;form method=&quot;POST&quot; action=&quot;...&quot;&gt;</code></td>\n<td>發送 cookie</td>\n<td>不發送</td>\n</tr>\n<tr>\n<td>iframe</td>\n<td><code class=\"language-text\">&lt;iframe src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></td>\n<td>發送 cookie</td>\n<td>不發送</td>\n</tr>\n<tr>\n<td>AJAX</td>\n<td><code class=\"language-text\">$.get(&quot;...&quot;)</code></td>\n<td>發送 cookie</td>\n<td>不發送</td>\n</tr>\n<tr>\n<td>圖片</td>\n<td><code class=\"language-text\">&lt;img src=&quot;...&quot;&gt;</code></td>\n<td>發送 cookie</td>\n<td>不發送</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>唯一問題是沒辦法擋掉 GET 形式的 CSRF，這點要注意</p>\n</blockquote>\n<h4 id=\"參考資料\" style=\"position:relative;\">參考資料<a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10189201\">攻擊行為－SQL 資料隱碼攻擊 SQL injection</a></li>\n<li><a href=\"http://lk1ngaa7.github.io/2016/01/25/pdo-with-mysql/\">pdo防止注入的原理</a></li>\n<li><a href=\"https://blog.csdn.net/sky_zhe/article/details/9702489\">PHP中如何防止SQL注入</a></li>\n<li><a href=\"https://forum.gamer.com.tw/Co.php?bsn=60292&#x26;sn=11267\">給網頁開發新人的 XSS 攻擊介紹</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/02/25/csrf-introduction/\">讓我們來談談 CSRF</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html\">Cookie 的 SameSite 属性</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .visual-studio-dark .mtk1 { color: #D4D4D4; }\n  .visual-studio-dark .mtk4 { color: #569CD6; }\n  .visual-studio-dark .mtk11 { color: #CE9178; }\n  .visual-studio-dark .mtk5 { color: #B5CEA8; }\n  .visual-studio-dark .mtk3 { color: #6A9955; }\n  .visual-studio-dark .mtk13 { color: #808080; }\n  .visual-studio-dark .mtk8 { color: #9CDCFE; }\n  .visual-studio-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#1-sql-injection-%E7%9A%84%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95\">1. SQL Injection 的攻擊原理以及防範方法</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E5%B8%B8%E8%A6%8B%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95\">常見攻擊手法</a></li>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D\">如何避免</a></li>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E7%AD%86%E8%A8%98%EF%BC%9Aprepared-statements-%E9%A0%90%E8%99%95%E7%90%86%E8%AA%9E%E5%8F%A5\">筆記：Prepared Statements 預處理語句</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E8%AB%8B%E8%AA%AA%E6%98%8E-xss-%E7%9A%84%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95\">請說明 XSS 的攻擊原理以及防範方法</a></p>\n<ul>\n<li>\n<p><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E5%A6%82%E4%BD%95%E9%98%B2%E7%AF%84\">如何防範</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#1-%E5%84%B2%E5%AD%98%E5%9E%8B%E5%92%8C%E5%8F%8D%E5%B0%84%E5%9E%8B\">1. 儲存型和反射型</a></li>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#2-dom-based-%E9%98%B2%E7%AF%84\">2. DOM-Based 防範</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E8%AB%8B%E8%AA%AA%E6%98%8E-csrf-%E7%9A%84%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95\">請說明 CSRF 的攻擊原理以及防範方法</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#server-%E7%9A%84%E9%98%B2%E7%A6%A6\">Server 的防禦</a></li>\n<li><a href=\"/Lidemy/%E8%AA%8D%E8%AD%98%20SQL%20Injection%E3%80%81XSS%E3%80%81CSRF%20%E7%AD%89%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86%E5%8F%8A%E9%98%B2%E7%AF%84%E6%96%B9%E6%B3%95/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"認識 SQL Injection、XSS、CSRF","date":"Oct 11, 2020","tags":["Lidemy"],"category":"程式導師計畫","log":null,"thumbnail":null}}},"pageContext":{"slug":"/Lidemy/認識 SQL Injection、XSS、CSRF 等攻擊原理及防範方法/","previous":{"fields":{"slug":"/Lidemy/雜湊跟加密的差別在哪裡，為什麼密碼要雜湊過後才存入資料庫/"},"frontmatter":{"title":"為什麼密碼要雜湊過後才存入資料庫？","tags":["Lidemy"],"date":"2020-10-11","category":"程式導師計畫","mark":null,"description":"雜湊跟加密的差別在哪裡","log":null}},"next":{"fields":{"slug":"/Lidemy/什麼是 Single Page Application/"},"frontmatter":{"title":"什麼是 Single Page Application","tags":["JavaScript","Lidemy"],"date":"2020-10-11","category":"程式導師計畫","mark":null,"description":"了解 SPA 架構及其優缺點","log":null}}}},"staticQueryHashes":["63159454"]}