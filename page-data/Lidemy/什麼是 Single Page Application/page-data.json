{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lidemy/什麼是 Single Page Application/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"f28ed46f-40bc-54ad-8872-39cdeffe3c17","excerpt":"單頁應用程式 single-page application，簡單來說，它一改以往 Multi-page（多頁式）的設計模式：每點選一個按鈕、進行一個動作，就得重新載入另外一個頁面的操作。SPA…","html":"<p>單頁應用程式 single-page application，簡單來說，它一改以往 Multi-page（多頁式）的設計模式：每點選一個按鈕、進行一個動作，就得重新載入另外一個頁面的操作。SPA 架構下，除了第一次需要全畫面渲染，之後網頁「<strong>不需跳轉頁面</strong>」就可以達到基本的建立、讀取、修改、刪除功能，透過「動態」重寫部分頁面的方式，提高使用者體驗。</p>\n<p><img src=\"https://i.imgur.com/WdTWbnQ.png\"></p>\n<p>從這張圖可以看到，只有第一次請求才需要回傳整份 HTML，之後的請求利用 AJAX 來拿到純資料內容（目前多以 JSON 格式為主），再進行局部更新。</p>\n<h3>SPA 的優缺點為何</h3>\n<h4>優點</h4>\n<ul>\n<li>前後端分離，各司其職</li>\n<li>單一頁面可以瀏覽完所有資訊，資訊傳遞快</li>\n<li>結合 UI 的工作改由瀏覽器完成，對 Server 來說負擔變小，這樣可以處理更多的請求</li>\n<li>局部更新，使用者體驗較好</li>\n</ul>\n<h4>缺點</h4>\n<ul>\n<li>有些人會對 CSR 的 SEO 有疑慮</li>\n<li>第一次跑畫面需要較長的反應時間</li>\n<li>因 URL 網址都沒有改變，前端要自己管理必須自定狀態來做判斷</li>\n</ul>\n<hr>\n<h3>這種後端負責提供只輸出資料的 API，前端一律都用 Ajax 串接的寫法，跟之前透過 PHP 直接輸出內容的留言板有什麼不同？</h3>\n<p>以前我們要從伺服器重新載入整個新頁面，這種稱為 Server-Side Render，意思是綁資料和結合 UI 的工作都在 Server 完成，之後回傳整份 HTML，瀏覽器拿到什麼就顯示什麼，但這樣一來產生的問題：</p>\n<ul>\n<li>頁面由伺服器產生，每次更新都需要全畫面重新渲染，不利使用者體驗</li>\n<li>Server 取得資料後，先計算畫面再整頁送出，運算及流量負荷太大。</li>\n</ul>\n<p>現在的話，透過 Ajax 拿資料，可以動態生成內容，達到局部更新的效果，將畫面渲染（Render）工作從 Server 端移到 Client 端，在 Client 端實作。</p>\n<p><img src=\"https://eww-wp.s3.ap-south-1.amazonaws.com/wp-content/uploads/2020/02/14064824/single-page-applications.jpg\"></p>\n<p>這種模式上的轉變，有賴於兩樣東西的幫助，第一個就是 Ajax 技術的愈發成熟：只需要在首次傳送時，傳入 HTML 檔以及 CSS 或 Javascript 檔，其餘資料可利用 AJAX 來取得，XML 或 JSON 格式資料來完成局部更新。</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">$</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ajax</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;/api/getUser&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> .</span><span class=\"mtk11\">done</span><span class=\"mtk1\">(</span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">$</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;#data-div&#39;</span><span class=\"mtk1\">).</span><span class=\"mtk11\">html</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> })</span></span></span></code></pre>\n<p>再來就是 REST 設計風格的整合，以系統標準化的方式定義資源，可以參考<a href=\"https://ihower.tw/blog/archives/1542\">這篇</a>，能夠直接更改 URL 的參數來取得特定資料，因為它使用固定格式的 URL 進行資料存取，易於測試。</p>\n<p>從以前 PHP 直接輸出整份 HTML，到前端改用 Ajax 串接，現在後端只要專注提供資料、產出 API，而前端的工作，不再只是把設計好的 UI 製作成 HTML 文件，需要學習以 JavaScript 來撰寫 Application Logic，或是呼叫 REST API，拿到 JSON 格式的資料，用相對應的模板生成內容。</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10160709\">前端小字典三十天每日一字】– SPA</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/09/16/frontend-backend-mvc/\">前後端分離與 SPA</a></li>\n<li><a href=\"https://medium.com/@mybaseball52/%E5%96%AE%E4%B8%80%E9%A0%81%E9%9D%A2%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F-c98c8a17081\">單一頁面應用程式</a></li>\n<li><a href=\"https://medium.com/schaoss-blog/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%8D%81-18-fe-%E7%82%BA%E4%BB%80%E9%BA%BC%E7%B6%B2%E7%AB%99%E8%A6%81%E5%81%9A%E6%88%90-spa-ssr-%E7%9A%84%E5%84%AA%E9%BB%9E%E6%98%AF%E4%BB%80%E9%BA%BC-c926145078a4\">為什麼網站要做成 SPA？SSR 的優點是什麼？</a></li>\n<li><a href=\"https://www.jollen.org/blog/2014/09/single-page-application.html\">認識 Single Page Application（SPA）</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Lidemy/%E4%BB%80%E9%BA%BC%E6%98%AF%20Single%20Page%20Application/#spa-%E7%9A%84%E5%84%AA%E7%BC%BA%E9%BB%9E%E7%82%BA%E4%BD%95\">SPA 的優缺點為何</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E4%BB%80%E9%BA%BC%E6%98%AF%20Single%20Page%20Application/#%E5%84%AA%E9%BB%9E\">優點</a></li>\n<li><a href=\"/Lidemy/%E4%BB%80%E9%BA%BC%E6%98%AF%20Single%20Page%20Application/#%E7%BC%BA%E9%BB%9E\">缺點</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Lidemy/%E4%BB%80%E9%BA%BC%E6%98%AF%20Single%20Page%20Application/#%E9%80%99%E7%A8%AE%E5%BE%8C%E7%AB%AF%E8%B2%A0%E8%B2%AC%E6%8F%90%E4%BE%9B%E5%8F%AA%E8%BC%B8%E5%87%BA%E8%B3%87%E6%96%99%E7%9A%84-api%EF%BC%8C%E5%89%8D%E7%AB%AF%E4%B8%80%E5%BE%8B%E9%83%BD%E7%94%A8-ajax-%E4%B8%B2%E6%8E%A5%E7%9A%84%E5%AF%AB%E6%B3%95%EF%BC%8C%E8%B7%9F%E4%B9%8B%E5%89%8D%E9%80%8F%E9%81%8E-php-%E7%9B%B4%E6%8E%A5%E8%BC%B8%E5%87%BA%E5%85%A7%E5%AE%B9%E7%9A%84%E7%95%99%E8%A8%80%E6%9D%BF%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E5%90%8C%EF%BC%9F\">這種後端負責提供只輸出資料的 API，前端一律都用 Ajax 串接的寫法，跟之前透過 PHP 直接輸出內容的留言板有什麼不同？</a></p>\n<ul>\n<li><a href=\"/Lidemy/%E4%BB%80%E9%BA%BC%E6%98%AF%20Single%20Page%20Application/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"什麼是 Single Page Application","date":"Oct 11, 2020","tags":["JavaScript","Lidemy"],"category":"程式導師計畫","thumbnail":null}}},"pageContext":{"slug":"/Lidemy/什麼是 Single Page Application/","previous":{"fields":{"slug":"/Lidemy/認識 SQL Injection、XSS、CSRF 等攻擊原理及防範方法/"},"frontmatter":{"title":"認識 SQL Injection、XSS、CSRF","tags":["Lidemy"],"date":"2020-10-11","category":"程式導師計畫","mark":null,"description":"了解網頁攻擊原理及其防範方法"}},"next":{"fields":{"slug":"/Lidemy/談談 Event Loop/"},"frontmatter":{"title":"談談 Event Loop","tags":["JavaScript","Lidemy","Event Loop"],"date":"2020-11-12","category":"程式導師計畫","mark":null,"description":"了解 JavaScript 執行特性及 Event Loop 事件循環機制"}}}},"staticQueryHashes":["63159454"]}