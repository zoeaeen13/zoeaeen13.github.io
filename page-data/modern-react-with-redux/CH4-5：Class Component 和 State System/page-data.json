{"componentChunkName":"component---src-templates-blog-post-js","path":"/modern-react-with-redux/CH4-5：Class Component 和 State System/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"d1b7310e-8e09-5bce-95d3-993a65288f9f","excerpt":"在 Hook System 還沒有出現時，早期的 functional component 是沒辦法擁有 state，只能用來展示一些固定的內容，資料往往由父層 props 傳入、在創建的時候 data 已經被決定好了。 為什麼需要 Class Component…","html":"<p>在 Hook System 還沒有出現時，早期的 functional component 是沒辦法擁有 state，只能用來展示一些固定的內容，資料往往由父層 props 傳入、在創建的時候 data 已經被決定好了。</p>\n<br>\n<h5 id=\"為什麼需要-Class-Component？\" style=\"position:relative;\">為什麼需要 Class Component？<a href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%9C%80%E8%A6%81-Class-Component%EF%BC%9F\" aria-label=\"為什麼需要 Class Component？ permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>執行 React 專案時，首先 JS file 被瀏覽器載入，這時候 App component 會被創建，裡面的程式碼一一被執行，然後才是回傳 JSX、被 ReactDOM 渲染到畫面上。</p>\n<p>如果那些程式碼是非同步的話，就得用 callback function 才能處理，但結果返回的時候，畫面往往已經渲染完畢，這時候，如何才能跟 component 溝通、去更新畫面呢？</p>\n<p>我們需要 class component 來做狀態管理。</p>\n<p>它不但可以像 functional component 一樣產生 JSX，還擁有生命週期方法，讓我們能在特定時間點執行程式碼，另外也具備「state system」來管理狀態，可以方便更新畫面。</p>\n<hr>\n<br>\n<br>\n<p>在改寫 functional component 為 class component 時，有幾點要留意：</p>\n<ol>\n<li>一定是 JavaScript 的類別</li>\n<li>一定要繼承 <code class=\"language-text\">React.Component</code>（extends）</li>\n<li>一定要定義 <code class=\"language-text\">render</code> 方法，也就是元件要回傳的 JSX</li>\n</ol>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// functional component</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> App = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk13\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span><span class=\"mtk1\">Hi</span><span class=\"mtk13\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// class component</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> App </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> React.Component {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  render() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk13\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span><span class=\"mtk1\">Hi</span><span class=\"mtk13\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>使用 <code class=\"language-text\">class</code> keyword 將在 JS 創建類別，而定義一個 React component 類別，需要讓它繼承 <code class=\"language-text\">React.Component</code>，在 <code class=\"language-text\">React.Component</code> 裡面提供很多方法、我們不需要自己寫，因為繼承的關係能夠直接借用過來（原型繼承）。</p>\n<p>我們依照程式的需求再來決定要使用哪些方法，但在 <code class=\"language-text\">React.Component</code> 中有個 subclass 是一定要實作的，就是定義 component 該怎麼渲染的 <code class=\"language-text\">render</code> 方法，和原本寫 functional component 的 return 很相像，都是用在回傳元件需要的 JSX。</p>\n<hr>\n<br>\n<h4 id=\"React-State-System\" style=\"position:relative;\">React State System<a href=\"#React-State-System\" aria-label=\"React State System permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>只有 class component 才能擁有 state（<del>這點在 React 16.8 之後被打破</del>）</li>\n<li>初學者容易把它和 props 混淆</li>\n<li>state 是一個 JS 物件，會存放和元件有關的 data</li>\n<li>state 要在創建元件時就被初始化</li>\n<li>state 只能透過 <code class=\"language-text\">setState</code> 方法更新，不能用一般 JavaScript 習慣的賦值</li>\n<li>更新 state 狀態會促使 component 重新渲染 => 換句話說，想要讓畫面變動，要透過 <code class=\"language-text\">setState</code> 方法來更新 state</li>\n</ul>\n<br>\n<h5 id=\"初始化-state\" style=\"position:relative;\">初始化 state<a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-state\" aria-label=\"初始化 state permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>state 要在創造元件時就被初始化，這樣在 <code class=\"language-text\">render</code> 方法就能使用到變數，之後的某個時間點同樣也可以用 <code class=\"language-text\">setState</code> 進行更新來重新渲染。</p>\n<p>而要做到這一點，在 JavaScript 中有一個會隨著 class 一同建立並初始化物件的特殊方法、會在進行其他事情之前先被自動調用，很適合拿來初始化 state，那就是 <strong>constructor</strong>（構造函數）。</p>\n<br>\n<blockquote>\n<p><strong>constructor 構造函數</strong></p>\n</blockquote>\n<p>參考「 <a href=\"https://overreacted.io/zh-hant/why-do-we-write-super-props/\">為什麼我們要寫 super(props) </a>」，當你呼叫 constructor 建構子後、參數帶入父層傳遞的 props，JavaScript 規定必須先呼叫 super function，才能使用 <code class=\"language-text\">this</code>。</p>\n<p>原因是，我們現在是借用 <code class=\"language-text\">React.Component</code> 的方法，當我們在 App 裡面呼叫 constructor 時，實際上正在覆蓋掉 <code class=\"language-text\">React.Component</code> 原本的 constructor 設置，為了要確保那些設置可以被正常使用，才會呼叫 super => 指示它去參照父類別的 constructor。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">super</span><span class=\"mtk1\">(props)  </span><span class=\"mtk3\">// 是對父類構造函數的引用</span></span></span></code></pre>\n<p>在 super 被呼叫前，JavaScript 不允許我們去使用 <code class=\"language-text\">this</code>，是為了避免遇到以下這種情況：</p>\n<p>例如：在還沒有設置前就先被呼叫</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> Person {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(name) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.name = name;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> PolitePerson </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> Person {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(name) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.greetColleagues(); </span><span class=\"mtk3\">// 🔴 不被允許</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">(name);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  greetColleagues() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    alert(</span><span class=\"mtk11\">&#39;My name is &#39;</span><span class=\"mtk1\"> + </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.name + </span><span class=\"mtk11\">&#39;, nice to meet you!&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>帶入 props 也是類似的形式，讓 constructor 初始化 <code class=\"language-text\">this.props</code>，接下來也可以設置狀態，創建一個 state 物件指派給 <code class=\"language-text\">this.state</code> 變數</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// React 內部</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> Component {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(props) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.props = props;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> App </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> React.Component {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(props) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">(props)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.state = { lat: </span><span class=\"mtk4\">null</span><span class=\"mtk1\"> } </span><span class=\"mtk3\">// 初始化 state 才會用 assignment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  render() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk13\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span><span class=\"mtk1\">Latitude: </span><span class=\"mtk4\">{this</span><span class=\"mtk1\">.state.lat</span><span class=\"mtk4\">}</span><span class=\"mtk13\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<hr>\n<br>\n<h5 id=\"更新-state\" style=\"position:relative;\">更新 state<a href=\"#%E6%9B%B4%E6%96%B0-state\" aria-label=\"更新 state permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>一般跟渲染無關的操作，不會將程式碼寫在 <code class=\"language-text\">render</code> 方法裡面，因為 <code class=\"language-text\">render</code> 方法很常被呼叫，為了避免重複取得執行結果，通常不會將邏輯寫在這裏。</p>\n<p>初始化的話，除了之後介紹的生命週期方法，也可以寫在 constructor 裡面：</p>\n<ul>\n<li>假設有狀態 lat 和 errorMessage 兩個，分別會在獲得不同的結果時更新</li>\n<li>不需每次更新全部屬性，可以<strong>只針對我們要調整的值</strong>，它不會移除屬性</li>\n</ul>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> App </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> React.Component {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(props) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">(props)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.state = { lat: </span><span class=\"mtk4\">null</span><span class=\"mtk1\">, errorMessage: </span><span class=\"mtk11\">&#39;&#39;</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    window.navigator.geolocation.getCurrentPosition(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (position) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk3\">// call setState method if updating</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.setState({ lat: position.coords.latitude })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (err) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk3\">// error handling</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.setState({ errorMessage: err.message })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  render() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk13\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span><span class=\"mtk1\">Latitude:</span><span class=\"mtk13\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk13\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>總結，目前流程如下</p>\n<ol>\n<li>瀏覽器加載 XML 文件，請求 JavaScript file 然後執行</li>\n<li>創建 App</li>\n<li>class component 先調用的是 <code class=\"language-text\">constructor</code> 函數，呼叫 super 引用 <code class=\"language-text\">React.Component</code> 設定</li>\n<li>初始化狀態，創建 state object 並指配給 <code class=\"language-text\">this.state</code> 這個特殊的變數</li>\n<li>執行 render 方法，回傳 JSX</li>\n<li>如果需要更新狀態，得呼叫 <code class=\"language-text\">this.setState</code> 這個內建的特殊函式，傳入新的狀態</li>\n<li>在 <code class=\"language-text\">this.setState</code> 後，React 自動會知道我們已經更新屬性，立即重新渲染元件</li>\n</ol>\n<br>\n<p>其他參考資料： <a href=\"https://www.digitalocean.com/community/tutorials/react-constructors-with-react-components\">Understanding Constructors with React Components</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .visual-studio-dark .mtk3 { color: #6A9955; }\n  .visual-studio-dark .mtk4 { color: #569CD6; }\n  .visual-studio-dark .mtk1 { color: #D4D4D4; }\n  .visual-studio-dark .mtk13 { color: #808080; }\n  .visual-studio-dark .mtk11 { color: #CE9178; }\n  .visual-studio-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/modern-react-with-redux/CH4-5%EF%BC%9AClass%20Component%20%E5%92%8C%20State%20System/#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%9C%80%E8%A6%81-class-component%EF%BC%9F\">為什麼需要 Class Component？</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/modern-react-with-redux/CH4-5%EF%BC%9AClass%20Component%20%E5%92%8C%20State%20System/#react-state-system\">React State System</a></p>\n<ul>\n<li><a href=\"/modern-react-with-redux/CH4-5%EF%BC%9AClass%20Component%20%E5%92%8C%20State%20System/#%E5%88%9D%E5%A7%8B%E5%8C%96-state\">初始化 state</a></li>\n<li><a href=\"/modern-react-with-redux/CH4-5%EF%BC%9AClass%20Component%20%E5%92%8C%20State%20System/#%E6%9B%B4%E6%96%B0-state\">更新 state</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CH4/5：Class Component 和 State System","type":"coding","date":"Jun 15, 2021","tags":["React","Udemy"],"category":"Modern React with Redux","log":null,"thumbnail":null}}},"pageContext":{"slug":"/modern-react-with-redux/CH4-5：Class Component 和 State System/","previous":{"fields":{"slug":"/modern-react-with-redux/CH2-3：認識 JSX 和 Component 特性/"},"frontmatter":{"title":"CH2/3：認識 JSX 和 Component 特性","tags":["React","Udemy"],"date":"2021-06-14","category":"Modern React with Redux","mark":null,"description":"JSX 和 HTML 的差別、認識 Component 的複用性與巢狀結構","log":"log"}},"next":{"fields":{"slug":"/modern-react-with-redux/CH6：討論生命週期/"},"frontmatter":{"title":"CH6：討論生命週期","tags":["React","Udemy"],"date":"2021-06-16","category":"Modern React with Redux","mark":null,"description":"","log":"list"}}}},"staticQueryHashes":["63159454"]}