{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin/Restful API 是啥？有什麼不一樣？/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"5e2d832a-c444-528b-a34f-3593281cedc7","excerpt":"什麼是 API？ 全名 Application Programming Interface，是讓第三方可以開發、應用在自身的溝通介面，幫助開發者能夠和外部互動的接口就是 API。常常聽到 Restful API 這個名詞，那它到底是什麼？和一般 Web API…","html":"<blockquote>\n<p>什麼是 API？</p>\n</blockquote>\n<p>全名 Application Programming Interface，是讓第三方可以開發、應用在自身的溝通介面，幫助開發者能夠和外部互動的接口就是 API。常常聽到 Restful API 這個名詞，那它到底是什麼？和一般 Web API 的差異又有哪些？這麼做有哪些好處呢？筆記一下！</p>\n<p>在解釋 Restful API 前，我們先來認識一下 HTTP 協定和它的請求方法：</p>\n<h2 id=\"HTTP-協定\" style=\"position:relative;\">HTTP 協定<a href=\"#HTTP-%E5%8D%94%E5%AE%9A\" aria-label=\"HTTP 協定 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>全名 Hypertext Transfer Protocol（超文本傳輸協定）為了讓客戶端和伺服器端的要求回應的規格統一，而出現的一定規範</p>\n<ul>\n<li>客戶端 Client side：發送要求 Request</li>\n<li>伺服器端 Server side：接收 Request，給出回應 Response</li>\n</ul>\n<h3 id=\"HTTP-Method-請求方法\" style=\"position:relative;\">HTTP Method 請求方法<a href=\"#HTTP-Method-%E8%AB%8B%E6%B1%82%E6%96%B9%E6%B3%95\" aria-label=\"HTTP Method 請求方法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>常見有 GET / POST / PUT / DELETE 幾種方法，正好會對應到資料庫基本操作 CRUD 增刪查改</p>\n<p>簡單來說，<strong>不同的 Method 就是對同一件事情做不同的操作</strong>，例如讀取和上傳資料就是不同的動作，自然會用呼叫方法的差異來設計</p>\n<table>\n<thead>\n<tr>\n<th>請求方法</th>\n<th>使用</th>\n<th>狀態</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>讀取特定資源或集合</td>\n<td>safe &#x26; idempotent</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>完整更新資源。如果識別碼是已知的，也可用於創建特定資源</td>\n<td>idempotent</td>\n</tr>\n<tr>\n<td>PUTCH</td>\n<td>在現有的資料欄，增加或<strong>部分更新</strong>一筆資料</td>\n<td></td>\n</tr>\n<tr>\n<td>POST</td>\n<td>創建新資源</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>通過識別碼刪除/刪除特定資源</td>\n<td>idempotent</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>PATCH 和 PUT 的差別在於，PATCH 並不是把原有的資料全部取出然後針對要更新的部分修改再送回，而<strong>僅送出要修改部分</strong>的參數</p>\n</blockquote>\n<hr>\n<p><strong>HTTP方法狀態描述</strong></p>\n<ul>\n<li>safe\n該操作本身就不會改變原本的資源狀態，不論請求一次或多次都只是讀取，並且同樣的結果是可以被快取（Cache）</li>\n<li>idempotent\n指 Client 端的該操作不管做一遍、兩遍或多遍，都會得到同樣的資源狀態結果，即對 server 端的影響結果不變</li>\n</ul>\n<p>更詳細的資料，請參考<a href=\"https://progressbar.tw/posts/53\">這篇</a>或<a href=\"https://matthung0807.blogspot.com/2019/02/http-idempotent-methods.html\"> HTTP 協議的Idempotent Methods</a></p>\n<hr>\n<h2 id=\"Restful-API\" style=\"position:relative;\">Restful API<a href=\"#Restful-API\" aria-label=\"Restful API permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>REST，全名 Representational State Transfer（具象狀態傳輸）是一種設計風格，Restful 只是轉為形容詞，Restful API 則是形容以此規範設計的 API。</p>\n<p>目的是幫助在世界各地不同軟體、程式在網際網路中能夠互相傳遞訊息。而每一個網頁都可視為一個資源（Resource）提供使用者使用，通過通用的介面（Interface）對資源進行操作</p>\n<ul>\n<li>Resource：資源</li>\n<li>Representational：表現形式，如 JSON，XML</li>\n<li>State Transfer：狀態變化。即上述講到的可利用 <strong>HTTP 動詞</strong>來做呼叫動作</li>\n</ul>\n<p>簡單來說，Restful API 是讓人能看懂，能單從一個 HTTP 要求所包含的資訊，預期會收到的資料型態。</p>\n<p><strong>一個 Resource 由一個 global identifier（即URI）所表示</strong>\n每一個網頁都可視為一個資源提供使用者使用，以資源操作的概念（指對某項 Resource 指派動作），結合 url path 與 HTTP Method，</p>\n<blockquote>\n<p>為了操作這些資源（Resources），網路的 components（即 clients 跟servers）透過標準化的介面（即 HTTP）來溝通並交換這些資源的 representations</p>\n</blockquote>\n<h3 id=\"RESTful-API-三種組成\" style=\"position:relative;\">RESTful API 三種組成<a href=\"#RESTful-API-%E4%B8%89%E7%A8%AE%E7%B5%84%E6%88%90\" aria-label=\"RESTful API 三種組成 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>Nouns 名詞\n定義資源位置的 URL，每個資源在網路上都會有<strong>唯一位置</strong>，就如每戶人家都有唯一的地址一樣</li>\n<li>Verbs 動詞\n對資源要做的動作，例如常用動作有 GET / POST / PUT / DELETE</li>\n<li>Content Types\n資源呈現方式，API 資源可以以多種方式表現，最常用的是 JSON，較輕量、也好處理</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//以前的一般API</span>\n獲得資料GET    <span class=\"token operator\">/</span>getData\n新增資料POST   <span class=\"token operator\">/</span>createData\n刪除資料DELETE <span class=\"token operator\">/</span>deleteData<span class=\"token operator\">/</span><span class=\"token number\">1</span>\n\n\n<span class=\"token comment\">//RESTful API</span>\n獲得資料GET     <span class=\"token operator\">/</span>data\n新增資料POST    <span class=\"token operator\">/</span>data\n刪除資料DELETE  <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span><span class=\"token number\">1</span></code></pre></div>\n<p>用一個唯一的 URL 定位資源，將不同動作藏在 HTTP 的方法裡面</p>\n<hr>\n<h3 id=\"RESTful-API-優點\" style=\"position:relative;\">RESTful API 優點<a href=\"#RESTful-API-%E5%84%AA%E9%BB%9E\" aria-label=\"RESTful API 優點 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>統一 API 接口：唯一 URL 表示 Resource 資源位置\n以往的一般 API 可能會分別向 A、B、C 三者請求，從不同的對方來完成動作，RESTful API 的優點是，是讓上述不同的請求動作由同一位完成---</li>\n<li>使 url path 更為簡潔、容易被理解</li>\n<li>無狀態 (stateless)\n處理請求的必要狀態包含在請求本身內，例如 Client 端需自行保存狀態，請求 Server 的時候，一併附上給 Server 端---</li>\n<li>使用 URI 作為資源標識符的請求中標識各資源\n即所有資源可以用 URI 定位，而且這個定位與其他資源無關，也不會因為其他資源的變化而變化，資源相互的依賴性降低---</li>\n</ul>\n<h3 id=\"URI-名詞\" style=\"position:relative;\">URI 名詞<a href=\"#URI-%E5%90%8D%E8%A9%9E\" aria-label=\"URI 名詞 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>URI 由 prefix + API endpoint 組成。API endpoint 的設計重點：</p>\n<ul>\n<li>一般資源會用複數名詞</li>\n<li>唯一資源（即對於 client 而言只有一份的資源）用單數名詞。例如 user 就是指目前使用者</li>\n<li>資源的層級架構。例如 <code class=\"language-text\">/books/123/chapters/2</code></li>\n</ul>\n<h3 id=\"Status-Code-狀態碼\" style=\"position:relative;\">Status Code 狀態碼<a href=\"#Status-Code-%E7%8B%80%E6%85%8B%E7%A2%BC\" aria-label=\"Status Code 狀態碼 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>2xx = Success（成功）</li>\n<li>3xx = Redirect（重定向）</li>\n<li>4xx = User error（客戶端錯誤）</li>\n<li>5xx = Server error（伺服器端錯誤）</li>\n</ul>\n<p>HTTP 狀態碼表明一個 HTTP 要求是否已經被完成，代表 <strong>API 層的執行狀態</strong>，回應分為五種：資訊回應、成功回應、重定向、用戶端錯誤及伺服器端錯誤。</p>\n<p>以下記錄遇過的幾種狀況，另可參考<a href=\"https://tw.twincl.com/programming/*641y\">這篇</a>：</p>\n<ul>\n<li><code class=\"language-text\">400 Bad Request</code> 伺服器因為收到無效語法，而無法理解請求</li>\n<li><code class=\"language-text\">401 Unauthorized</code>  指用戶端尚未驗證，也就是unauthenticated 需要授權以回應請求，有點像 403，但這裡的授權是有可能辦到的，之前接 API 經驗是有可能為”<strong>拼字錯誤</strong>” （Bearer 要大寫）</li>\n<li><code class=\"language-text\">403 Forbidden</code>\n無訪問權限，例如已經驗證過、但未被授權，所以伺服器拒絕給予應有的回應。不同於 401，伺服端知道用戶端的身份</li>\n<li><code class=\"language-text\">404 Not Found</code>\n伺服器找不到請求的資源，可能是<strong>路徑錯誤</strong></li>\n<li><code class=\"language-text\">429 Too Many Requests</code>\n用戶在給定的時間內（rate limiting）發送了過多的請求。用 <strong>ngrok 會有一分鐘 40 次的限制</strong>，之前做 side-project 曾設定錯誤的發送間隔，把合作後端的兩支 API 都打爆…</li>\n<li><code class=\"language-text\">500 Internal Server Error</code>\n伺服器端發生未知或無法處理的錯誤</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\">參考資料<a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li><a href=\"https://medium.com/itsems-frontend/api-%E6%98%AF%E4%BB%80%E9%BA%BC-restful-api-%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC-a001a85ab638\">API 是什麼? RESTful API 又是什麼?</a> </li>\n<li><a href=\"https://medium.com/@cindyliu923/%E4%BB%80%E9%BA%BC%E6%98%AF-rest-restful-7667b3054371\">什麼是 REST? RESTful?</a></li>\n<li><a href=\"https://progressbar.tw/posts/53\">休息(REST)式架構? 寧靜式(RESTful)的Web API是現在的潮流？</a></li>\n<li><a href=\"https://ihower.tw/blog/archives/1542\">什麼是 REST 跟 RESTful?</a></li>\n</ol>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#http-%E5%8D%94%E5%AE%9A\">HTTP 協定</a></p>\n<ul>\n<li><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#http-method-%E8%AB%8B%E6%B1%82%E6%96%B9%E6%B3%95\">HTTP Method 請求方法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#restful-api\">Restful API</a></p>\n<ul>\n<li><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#restful-api-%E4%B8%89%E7%A8%AE%E7%B5%84%E6%88%90\">RESTful API 三種組成</a></li>\n<li><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#restful-api-%E5%84%AA%E9%BB%9E\">RESTful API 優點</a></li>\n<li><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#uri-%E5%90%8D%E8%A9%9E\">URI 名詞</a></li>\n<li><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#status-code-%E7%8B%80%E6%85%8B%E7%A2%BC\">Status Code 狀態碼</a></li>\n<li><a href=\"/kotlin/Restful%20API%20%E6%98%AF%E5%95%A5%EF%BC%9F%E6%9C%89%E4%BB%80%E9%BA%BC%E4%B8%8D%E4%B8%80%E6%A8%A3%EF%BC%9F/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Restful API 是啥？有什麼不一樣？","date":"Mar 10, 2020","tags":["Kotlin","API"],"category":"Android","thumbnail":null}}},"pageContext":{"slug":"/kotlin/Restful API 是啥？有什麼不一樣？/","previous":{"fields":{"slug":"/kotlin/MVVM架構/"},"frontmatter":{"title":"Android - 第一次 MVVM 就上手","tags":["Kotlin","MVVM"],"date":"2020-03-04","category":"Android","mark":null,"description":"了解 Model-View-ViewModel 觀念，與 MVC 架構的不同之處、LiveData 特性及使用方式"}},"next":{"fields":{"slug":"/Lidemy/版本控制 - CLI 基礎及 Git 指令/"},"frontmatter":{"title":"Command Line 及 git 指令","tags":["git","Lidemy"],"date":"2020-06-05","category":"程式導師計畫","mark":null,"description":"用 CLI 對電腦下指令及如何進行版本控制"}}}},"staticQueryHashes":["63159454"]}