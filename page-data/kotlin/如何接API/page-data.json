{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin/如何接API/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"696eadec-1e07-5b33-bc15-84dbb555de16","excerpt":"近期挑戰賽需要接 Api，來練習 Retrofit 使用 Retrofit 由 Retrofit 2 封裝，後續交由 OkHttp 進行請求操作，操作攔截的話如 Time out 還是在 OkHttpClient 設定 Retrofit 2 則是遵循 RESTful 的 Http…","html":"<p>近期挑戰賽需要接 Api，來練習 Retrofit</p>\n<h2 id=\"使用-Retrofit\" style=\"position:relative;\">使用 Retrofit<a href=\"#%E4%BD%BF%E7%94%A8-Retrofit\" aria-label=\"使用 Retrofit permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>由 Retrofit 2 封裝，後續交由 OkHttp 進行請求操作，操作攔截的話如 Time out 還是在 OkHttpClient 設定</p>\n<ul>\n<li>Retrofit 2 則是遵循 RESTful 的 Http 框架進行封裝</li>\n<li>網路請求的動作主要由 OkHttp 進行</li>\n</ul>\n<p>先看過這些資料再去嘗試：有哪些接 api 的文章可以參考</p>\n<ol>\n<li><a href=\"https://medium.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-sofware-engineer-survival-guide/retrofit-2-%E8%B5%B7%E6%89%8B%E5%BC%8F-212644f33a9a\">Retrofit 2 起手式</a></li>\n<li><a href=\"https://blog.csdn.net/carson_ho/article/details/73732076\">這是一份很詳細的 Retrofit 2.0 使用教程</a></li>\n<li><a href=\"https://medium.com/@givemepass/retrofit-%E6%93%8D%E4%BD%9C%E6%95%99%E5%AD%B8-26c7851ec154\">Retrofit 操作教學</a></li>\n<li><a href=\"https://www.jianshu.com/p/8203238b4a1d\">Retrofit 網路請求學習筆記</a></li>\n</ol>\n<hr>\n<h3 id=\"加入第三方資源\" style=\"position:relative;\">加入第三方資源<a href=\"#%E5%8A%A0%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B3%87%E6%BA%90\" aria-label=\"加入第三方資源 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://square.github.io/okhttp/\">OkHttp 3</a>、<a href=\"https://square.github.io/retrofit/\">Retrofit2</a> 最新版本參考</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">implementation </span><span class=\"mtk11\">&#39;com.squareup.retrofit2:retrofit:2.6.0&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">implementation </span><span class=\"mtk11\">&#39;com.squareup.retrofit2:converter-gson:2.6.0&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">implementation </span><span class=\"mtk11\">&#39;com.squareup.okhttp3:okhttp:4.2.1&#39;</span></span></span></code></pre>\n<p>裝攔截器，debug 時很方便</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">implementation </span><span class=\"mtk11\">&quot;com.squareup.okhttp3:logging-interceptor:4.0.1&quot;</span></span></span></code></pre>\n<h3 id=\"開啟網路權限\" style=\"position:relative;\">開啟網路權限<a href=\"#%E9%96%8B%E5%95%9F%E7%B6%B2%E8%B7%AF%E6%AC%8A%E9%99%90\" aria-label=\"開啟網路權限 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;uses-permission android</span><span class=\"mtk4\">:</span><span class=\"mtk1\">name=”android.permission.INTERNET” /&gt;</span></span></span></code></pre>\n<hr>\n<h2 id=\"1-創建-Retrofit-單例物件\" style=\"position:relative;\">1. 創建 Retrofit 單例物件<a href=\"#1-%E5%89%B5%E5%BB%BA-Retrofit-%E5%96%AE%E4%BE%8B%E7%89%A9%E4%BB%B6\" aria-label=\"1 創建 Retrofit 單例物件 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"將呼叫-Api-寫成一個全域實例\" style=\"position:relative;\">將呼叫 Api 寫成一個全域實例<a href=\"#%E5%B0%87%E5%91%BC%E5%8F%AB-Api-%E5%AF%AB%E6%88%90%E4%B8%80%E5%80%8B%E5%85%A8%E5%9F%9F%E5%AF%A6%E4%BE%8B\" aria-label=\"將呼叫 Api 寫成一個全域實例 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p>一個類只有一個實例，並且該類提供了全域訪問</p>\n</blockquote>\n<p>參考 <a href=\"https://code.tutsplus.com/zh-hant/tutorials/android-design-patterns-the-singleton-pattern--cms-29153\">Android 設計模式：單例模式</a>，了解很多時候我們都只需要物件的一個實例，像是快取記憶體、OkHttpClient、HttpLoggingInterceptor、Retrofit、Gson、SharedPreferences 和倉庫類等。如果這些類產生多個物件實例，就會遇到許多問題，比如異常的 APP 反應，資源過度使用和其他混亂結果。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">object API {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//by lazy 在需要用到時才建立，只會初始化一次</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val apiInterface</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Api_Interface</span><span class=\"mtk1\"> by lazy {  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//攔截器，用以debug (非必要)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val logging = HttpLoggingInterceptor()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    logging.level = (HttpLoggingInterceptor.Level.BODY)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//建立OkHttpClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val myOkHttpClient = OkHttpClient.Builder()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .readTimeout(</span><span class=\"mtk5\">10</span><span class=\"mtk1\">, TimeUnit.SECONDS)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .addInterceptor(logging)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .build()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//retrofit實體</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">return</span><span class=\"mtk1\">@</span><span class=\"mtk4\">lazy</span><span class=\"mtk1\"> Retrofit.Builder()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .baseUrl(</span><span class=\"mtk11\">&quot;http://104.155.209.122&quot;</span><span class=\"mtk1\">)  </span><span class=\"mtk3\">//網址</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .client(myOkHttpClient)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .addConverterFactory(GsonConverterFactory.create())  </span><span class=\"mtk3\">//解析Json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .build()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .create(Api_Interface</span><span class=\"mtk4\">::</span><span class=\"mtk1\">class.java)   </span><span class=\"mtk3\">//http的請求接口</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"addInterceptor-攔截器\" style=\"position:relative;\">addInterceptor 攔截器<a href=\"#addInterceptor-%E6%94%94%E6%88%AA%E5%99%A8\" aria-label=\"addInterceptor 攔截器 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>印東西 <a href=\"https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor\">Logging Interceptor</a>\n可以做什麼？\n塞東西進去每一個網路請求，可以印出內容如下，印出類型選擇：NONE、BASIC、HEADERS、BODY 等等，代表內容的詳盡程度\n<img src=\"https://i.imgur.com/6InYSXl.png\"></li>\n<li>夾帶 <code class=\"language-text\">@Header</code>\n也可以塞入 Header 類型，這樣每一個網路請求就會帶著，比如 Content-Type、Accept 甚至是 Authorization\n<img src=\"https://i.imgur.com/yOj1CAd.png\"></li>\n</ul>\n<p>那麼在請求接口，就不需要每一個都加上 @Header</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk4\">GET</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&quot;/api/tags&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//註解 fun showMagic(@Header(&quot;Authorization&quot;) token: String): Call&lt;MagicList&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun showMagic()</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Call</span><span class=\"mtk1\">&lt;MagicList&gt;</span></span></span></code></pre>\n<hr>\n<h3 id=\"請求接口-Api-Interface\" style=\"position:relative;\">請求接口 Api Interface<a href=\"#%E8%AB%8B%E6%B1%82%E6%8E%A5%E5%8F%A3-Api-Interface\" aria-label=\"請求接口 Api Interface permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>創立 Http 的請求接口，例如 <code class=\"language-text\">@GET</code> 和 <code class=\"language-text\">@POST</code> 用法，了解 <code class=\"language-text\">@Body</code> 和 <code class=\"language-text\">@Query</code> 參數作用。</p>\n<p>該怎麼理解 Interface？\n可以想像成一般資料是由後端提供，那前端就要去接這個資料，在 Interface 這個中介站裡面完成溝通，所以需要填入請求的類型、請求的參數、要求返回的資料等等。</p>\n<p>可以看到下方寫了三個函式，不同的 url 對應不同的網路請求，有些需要帶特定參數（例如某個 Int 值或 <xxRequest>）有些則不用，要求的回傳資料則用<xxResponse>去接，這個是我們自定義的 Data class，下一步會進行說明：</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> Api_Interface {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk4\">GET</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&quot;/api/playerGameStatus&quot;</span><span class=\"mtk1\">)   </span><span class=\"mtk3\">//url</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun gameStatus(): Call&lt;</span><span class=\"mtk4\">PlayerResponse</span><span class=\"mtk1\">&gt;  </span><span class=\"mtk3\">//要求回傳資料格式&lt;PlayerResponse &gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @POST(</span><span class=\"mtk11\">&quot;/api/enterGame&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun enterGame(@</span><span class=\"mtk4\">Body</span><span class=\"mtk1\"> enterRequest: EnterRequest): Call&lt;</span><span class=\"mtk4\">EnterResponse</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @GET(</span><span class=\"mtk11\">&quot;/api/playerGameAnswer&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun bomb(@</span><span class=\"mtk4\">Query</span><span class=\"mtk1\">( </span><span class=\"mtk11\">&quot;playerId&quot;</span><span class=\"mtk1\"> ) playerId:Int): Call&lt;</span><span class=\"mtk4\">BombResponse</span><span class=\"mtk1\">&gt;</span></span></span></code></pre>\n<hr>\n<h2 id=\"2-定義資料格式\" style=\"position:relative;\">2. 定義資料格式<a href=\"#2-%E5%AE%9A%E7%BE%A9%E8%B3%87%E6%96%99%E6%A0%BC%E5%BC%8F\" aria-label=\"2 定義資料格式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>和後端溝通所需的資料型態，以便於對接。如果要接的資料長這個樣子，可能還比較好拆解：\n<img src=\"https://i.imgur.com/0Q8Hnll.png\"></p>\n<p>但如果今天看到要接的 API 長這樣，可能有些難以進行：</p>\n<p><img src=\"https://i.imgur.com/h3xiidC.png\"></p>\n<p>這時我們可利用一些小工具來完成資料格式：</p>\n<ul>\n<li>開 Postman 查看</li>\n<li>線上版 <a href=\"https://jsoneditoronline.org/\">JsonEditorOnline</a>\n<img src=\"https://i.imgur.com/hzZv6YZ.png\"></li>\n<li>安裝 <a href=\"https://plugins.jetbrains.com/plugin/9960-json-to-kotlin-class-jsontokotlinclass-\">JSON To Kotlin Class</a> 套件\n在 Android Studio 點選左上角 code>> generate>> Kotlin Data Classes from JSON（或直接鍵盤 alt+K）直接生成格式\n<img src=\"https://i.imgur.com/5MvgY9L.png\"></li>\n</ul>\n<hr>\n<p>把請求參數 <strong>Request</strong> 和回傳資料 <strong>Response</strong> 的格式寫好，就是用來填入請求 Call 的資料格式</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">data </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> EnterRequest(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val enterTime: Int,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val name: String,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val position: Int</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">data </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> EnterResponse(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val endTime: String,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val playerId: Int,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val players: List&lt;</span><span class=\"mtk4\">PlayInfo</span><span class=\"mtk1\">&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val yourName: String</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<hr>\n<h2 id=\"3-在-Activtiykt-實作接後端資料（異步請求）\" style=\"position:relative;\">3. 在 Activtiy.kt 實作接後端資料（異步請求）<a href=\"#3-%E5%9C%A8-Activtiykt-%E5%AF%A6%E4%BD%9C%E6%8E%A5%E5%BE%8C%E7%AB%AF%E8%B3%87%E6%96%99%EF%BC%88%E7%95%B0%E6%AD%A5%E8%AB%8B%E6%B1%82%EF%BC%89\" aria-label=\"3 在 Activtiykt 實作接後端資料（異步請求） permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>執行 Call function 的 <strong>enqueue</strong> 方法，需帶入 Callback 處理回傳結果，從回傳結果（onResponse）裡面可拿到 Service 回傳的資料</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">enqueue(callback</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> Callback)</span></span></span></code></pre>\n<p>要注意，用這方法 OkHttp 是自行產生一個執行緒，在裡面執行 Call 的 execute 方法（參考<a href=\"https://ithelp.ithome.com.tw/articles/10207954\">這篇</a>）</p>\n<blockquote>\n<p>不需要自己另開 Thread 來執行請求，Callback 也會在該 Thread 中執行。\n但若需變更 UI 介面就需要用 runOnUiThread 方法由主執行緒處理。</p>\n</blockquote>\n<hr>\n<p>通常我們需要的資訊會在 Response 的 body() 喔！</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">API1.apiInterface.gameStatus().enqueue(object</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Callback</span><span class=\"mtk1\">&lt;PlayerResponse&gt;{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    override fun onFailure(call</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Call</span><span class=\"mtk1\">&lt;PlayerResponse&gt;, t</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> Throwable) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        println(</span><span class=\"mtk11\">&quot;=============$t&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    override fun onResponse(call</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Call</span><span class=\"mtk1\">&lt;PlayerResponse&gt;, response</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Response</span><span class=\"mtk1\">&lt;PlayerResponse&gt;) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (response.code() == </span><span class=\"mtk5\">200</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            val responsebody = response.body()   </span><span class=\"mtk3\">//資料就在放在body()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            println(</span><span class=\"mtk11\">&quot;=============$responsebody&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span></code></pre>\n<hr>\n<h3 id=\"使用-http-會被-Android-Studio-擋下的問題\" style=\"position:relative;\">🔨使用 http 會被 Android Studio 擋下的問題<a href=\"#%E4%BD%BF%E7%94%A8-http-%E6%9C%83%E8%A2%AB-Android-Studio-%E6%93%8B%E4%B8%8B%E7%9A%84%E5%95%8F%E9%A1%8C\" aria-label=\"使用 http 會被 Android Studio 擋下的問題 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>如果發送請求一直不過，除了沒開網路權限，還要查看是不是印出以下內容，可能因安全性問題被擋下</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">UnknownServiceException</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">CLEARTEXT</span><span class=\"mtk1\"> communication to f5234a33.ngrok.io not permitted by network security policy</span></span></span></code></pre>\n<p>第一種方法就是先開 Postman 查看能不能自行加 s 來解決這個問題\n有些自行更成 https 可以過關，有些卻不行</p>\n<p>那麼，在不麻煩後端的情況下，可以透過一些設定來修改Android Studio 預設，參考這篇 <a href=\"https://www.jianshu.com/p/57047a84e559\">http 网络请求的问题</a>來解決</p>\n<ol>\n<li>在 res 下新增一個名為 xml 資料夾，然后建立一个.xml 文件，取名 network<em>security</em>config</li>\n</ol>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">xml version=</span><span class=\"mtk11\">&quot;1.0&quot;</span><span class=\"mtk1\"> encoding=</span><span class=\"mtk11\">&quot;utf-8&quot;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;network-security-config&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;base-config cleartextTrafficPermitted=</span><span class=\"mtk11\">&quot;true&quot;</span><span class=\"mtk1\"> /&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;/network-security-config&gt;</span></span></span></code></pre>\n<p><img src=\"https://i.imgur.com/hOnRc6k.png\"></p>\n<ol start=\"2\">\n<li>在Manifest 的 <strong>application 標籤</strong>增加属性 <code class=\"language-text\">networkSecurityConfig</code></li>\n</ol>\n<p><img src=\"https://i.imgur.com/i2IyuXI.png\"></p>\n<hr>\n<hr>\n<h3 id=\"Tips\" style=\"position:relative;\">Tips<a href=\"#Tips\" aria-label=\"Tips permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>最好在 onFailure 和 onResponse 印出來內容，如果出錯可以看到是什麼原因</li>\n<li>設條件 <code class=\"language-text\">response.isSuccessful</code> 或判斷狀態碼 <code class=\"language-text\">response.code() == 200</code>，通常 onResponse 有好幾種回傳結果</li>\n<li>onResponse 其實會處理 200~500 的 <strong>ErrorResponse</strong></li>\n<li>接到 <code class=\"language-text\">response.body()</code> 之後，再節選做成自己需要的資料就行</li>\n<li>發生錯誤等非 200 的狀態，是無法從 <code class=\"language-text\">response.body()</code> 取得資料，要從`response.errorBody() 拿</li>\n<li>非網路回傳的狀態處理，透過 onFailure 的 callback，參考<a href=\"https://medium.com/@jefflin1982/android-%E9%97%9C%E6%96%BCretrofil%E7%9A%84%E5%85%B6%E4%BB%96%E5%B0%8F%E4%BA%8B%E6%83%85-587609eb27e5\">關於Retrofit的其他小事情</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .visual-studio-dark .mtk1 { color: #D4D4D4; }\n  .visual-studio-dark .mtk11 { color: #CE9178; }\n  .visual-studio-dark .mtk4 { color: #569CD6; }\n  .visual-studio-dark .mtk3 { color: #6A9955; }\n  .visual-studio-dark .mtk5 { color: #B5CEA8; }\n  .visual-studio-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#%E4%BD%BF%E7%94%A8-retrofit\">使用 Retrofit</a></p>\n<ul>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#%E5%8A%A0%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B3%87%E6%BA%90\">加入第三方資源</a></li>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#%E9%96%8B%E5%95%9F%E7%B6%B2%E8%B7%AF%E6%AC%8A%E9%99%90\">開啟網路權限</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#1-%E5%89%B5%E5%BB%BA-retrofit-%E5%96%AE%E4%BE%8B%E7%89%A9%E4%BB%B6\">1. 創建 Retrofit 單例物件</a></p>\n<ul>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#%E5%B0%87%E5%91%BC%E5%8F%AB-api-%E5%AF%AB%E6%88%90%E4%B8%80%E5%80%8B%E5%85%A8%E5%9F%9F%E5%AF%A6%E4%BE%8B\">將呼叫 Api 寫成一個全域實例</a></li>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#addinterceptor-%E6%94%94%E6%88%AA%E5%99%A8\">addInterceptor 攔截器</a></li>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#%E8%AB%8B%E6%B1%82%E6%8E%A5%E5%8F%A3-api-interface\">請求接口 Api Interface</a></li>\n</ul>\n</li>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#2-%E5%AE%9A%E7%BE%A9%E8%B3%87%E6%96%99%E6%A0%BC%E5%BC%8F\">2. 定義資料格式</a></li>\n<li>\n<p><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#3-%E5%9C%A8-activtiykt-%E5%AF%A6%E4%BD%9C%E6%8E%A5%E5%BE%8C%E7%AB%AF%E8%B3%87%E6%96%99%EF%BC%88%E7%95%B0%E6%AD%A5%E8%AB%8B%E6%B1%82%EF%BC%89\">3. 在 Activtiy.kt 實作接後端資料（異步請求）</a></p>\n<ul>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#%E4%BD%BF%E7%94%A8-http-%E6%9C%83%E8%A2%AB-android-studio-%E6%93%8B%E4%B8%8B%E7%9A%84%E5%95%8F%E9%A1%8C\">🔨使用 http 會被 Android Studio 擋下的問題</a></li>\n<li><a href=\"/kotlin/%E5%A6%82%E4%BD%95%E6%8E%A5API/#tips\">Tips</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"新手上路，如何接 API 呢？","type":"coding","date":"Nov 11, 2019","tags":["Kotlin"],"category":"Android","log":null,"thumbnail":null}}},"pageContext":{"slug":"/kotlin/如何接API/","previous":{"fields":{"slug":"/note/關於好想工作室/"},"frontmatter":{"title":"好想工作室，究竟是一個什麼樣的環境？讓創辦人告訴你","tags":["好想工作室"],"date":"2019-10-09","category":null,"mark":null,"description":null,"log":null}},"next":{"fields":{"slug":"/kotlin/開啟相機權限/"},"frontmatter":{"title":"Android - 掃描 QR Code","tags":["Kotlin"],"date":"2019-11-26","category":"Android","mark":null,"description":"開啟相機權限及掃瞄功能","log":null}}}},"staticQueryHashes":["63159454"]}