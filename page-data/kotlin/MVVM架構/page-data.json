{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin/MVVM架構/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"ffe91206-f423-5238-a41b-e978eda73386","excerpt":"最近專案使用到 MVVM 架構，這裡實作一個簡單的範例，記錄學習。 所謂 MVVM，是 Model、View、ViewModel 的簡稱 Model\n管理資料來源，包括取得、更新資料等操作，資料來源可以是 Web API 或本地 SharedPreference View…","html":"<p>最近專案使用到 MVVM 架構，這裡實作一個簡單的範例，記錄學習。</p>\n<blockquote>\n<p>所謂 MVVM，是 <strong>Model、View、ViewModel</strong> 的簡稱</p>\n</blockquote>\n<ul>\n<li><strong>Model</strong>\n管理資料來源，包括取得、更新資料等操作，資料來源可以是 Web API 或本地 SharedPreference</li>\n<li><strong>View</strong>\n指 Activity、Fragment 及 xml，這些屬於頁面（View），也就是處理顯示 UI 及與使用者互動。</li>\n<li><strong>ViewModel</strong>\n接收 View 的請求，並從Model取得資料。ViewModel 不會持有任何的UI實體。</li>\n</ul>\n<hr>\n<p>為什麼要使用 MVVM 架構？\n作為初學，可以簡單理解 MVVM 是進行「<strong>關注點分離</strong>」，讓頁面（View）與該頁面的邏輯處理部分徹底切隔開來，不會全部寫在一起，不再像以前一樣將接受通知、請求資料、UI 更新、整理 response 等全擠在同一 Activity 裡面。</p>\n<p>這麼做好處很多，比如…<strong>旋轉頁面</strong>時資料不會輕易消失！</p>\n<hr>\n<p>為什麼可以做到？來看一段網上資料講解 MVVM 實作</p>\n<blockquote>\n<p>通過 Activity/Fragment 持有 ViewModel，而 ViewModel 持有各類 LiveData，Activity/Fragment 註冊觀察需要的數據,實現數據與 UI 的同步，而且不會因此發生 Activity 洩漏，甚至可以用 ViewModel 來進行 Activity/Fragment 之間的通訊</p>\n</blockquote>\n<p>是不是有看沒有懂？\n初學 MVVM 得花一點時間，網路上解釋很多，想辦法把 ViewModel 和 LiveData 看懂，然後實作一遍。</p>\n<h3 id=\"ViewModel，是什麼\" style=\"position:relative;\">ViewModel，是什麼<a href=\"#ViewModel%EF%BC%8C%E6%98%AF%E4%BB%80%E9%BA%BC\" aria-label=\"ViewModel，是什麼 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>讓處理資料的 Model 和處理畫面的 View 分離，ViewModel 以<strong>生命周期</strong>的方式<strong>儲存</strong>和 UI 相關的數據。</p>\n<ul>\n<li>ViewModel 只在 Activity 存活</li>\n<li>只會創建一次，可以在一個生命週期裡的 <code class=\"language-text\">onCreate</code> 到 <code class=\"language-text\">OnDestroy</code> 之間保存實例，不會受到屏幕旋轉等 Configuration Change 影響</li>\n<li>當銷毀時，它會主動調用 <code class=\"language-text\">onClered</code></li>\n</ul>\n<p>看下圖更清楚，ViewModel scope 就是跟著 Activity 的生命週期，所以儲存在裡面的資料，不會因為使用跳到別的 APP 或旋轉螢幕而消失掉，在 Activity 沒有被銷毀前，ViewModel 存放資料會一直存在。</p>\n<p><img src=\"https://i.imgur.com/78lwCP7.png\"></p>\n<h3 id=\"用法\" style=\"position:relative;\">用法<a href=\"#%E7%94%A8%E6%B3%95\" aria-label=\"用法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>宣告一個 ViewModel 類，裡面會有 LiveData 變數，會通過 Activity/Fragment 持有 ViewModel 實例</p>\n<h3 id=\"LiveData，又是什麼？\" style=\"position:relative;\">LiveData，又是什麼？<a href=\"#LiveData%EF%BC%8C%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\" aria-label=\"LiveData，又是什麼？ permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>它具有<strong>生命週期感知</strong>的功能，LiveData 行為跟 View 無關，是跟著  ViewModel、跟著整個生命週期，而感知功能是指 LiveData 會讓 Activity、Fragment 在活耀狀態時接收到資料的變化。</p>\n<ul>\n<li>在 ViewModel 中創建，然後可以通過 getter 方法在 Activity/Fragment 中取得</li>\n<li>LiveData 是資料的包裝，包裝對象可以是任何資料型態，包括集合（比如List）</li>\n<li>當生命週期處於 <code class=\"language-text\">onStop</code> 或者 <code class=\"language-text\">onPause</code> 時，LiveData 不會回調資料更新，直至生命週期為 <code class=\"language-text\">onResume</code> 時，立即回調</li>\n<li>生命週期處於 <code class=\"language-text\">onDestory</code> 時，觀察者會自動刪除，防止內存洩漏</li>\n</ul>\n<h3 id=\"用法-1\" style=\"position:relative;\">用法<a href=\"#%E7%94%A8%E6%B3%95-1\" aria-label=\"用法 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>宣告一個某資料型態的 LiveData，通常在 ViewModel 創建，當 Model 中有東西要儲存，就會放到 ViewModel 裡面的 LiveData</p>\n<hr>\n<h2 id=\"來實作基本-MVVM-架構\" style=\"position:relative;\">來實作基本 MVVM 架構<a href=\"#%E4%BE%86%E5%AF%A6%E4%BD%9C%E5%9F%BA%E6%9C%AC-MVVM-%E6%9E%B6%E6%A7%8B\" aria-label=\"來實作基本 MVVM 架構 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>搭配 Retrofit，以 <a href=\"https://jsonplaceholder.typicode.com/\">JSONPlaceholder</a> 提供的 API，來練習 MVVM 架構。</p>\n<p>這次使用的資料格式很簡單，只有三項：</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">&quot;userId&quot;</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk5\">1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">&quot;id&quot;</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk5\">1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">&quot;title&quot;</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;quidem molestiae enim&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//baseUrl：https://jsonplaceholder.typicode.com/albums/1</span></span></span></code></pre>\n<p>首先建立 <strong>Data Model</strong></p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">data </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> TestData(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val id: Int,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val title: String,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val userId: Int</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><strong>Api Interface</strong></p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> Api_Interface {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk4\">GET</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&quot;albums/1&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun getAlbums(): Call&lt;</span><span class=\"mtk4\">TestData</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong>請求接口</strong>\n如果不清楚 Retrofit 操作可以看 <a href=\"../%E5%A6%82%E4%BD%95%E6%8E%A5API\">如何接API</a></p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">object ApiService {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val mClient= OkHttpClient.Builder().build()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val mApiClent</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Api_Interface</span><span class=\"mtk1\"> by lazy {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        val mRetrofit= Retrofit.Builder()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .baseUrl(</span><span class=\"mtk11\">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .addConverterFactory(GsonConverterFactory.create())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .client(mClient)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .build()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        mRetrofit.create(Api_Interface</span><span class=\"mtk4\">::</span><span class=\"mtk1\">class.java)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<hr>\n<p>API 基本寫好了，因為資料只有三項，我們在 XML 就放一個 TextView 來顯示資料的 title</p>\n<p>要開始來建立 MVVM 架構，先看下圖的流程，首先 View（Activity/Fragment）會先向 ViewModel 請求，ViewModel 接受請求後從 Model 取得資料，也就是<strong>把 Model 要儲存的東西會放到 ViewModel 裡面的 LiveData</strong>（利用 setter 方法塞值給 LiveData）</p>\n<p>LiveData 有了值之後，就會通知在各頁面（Activity/Fragment）有訂閱該 LiveData 的觀察者們，進行相對應的 UI 處理，ViewModel 是不會持有任何 UI 實體的。</p>\n<p><img src=\"https://i.imgur.com/NLEtOgx.png\"></p>\n<h3 id=\"Model\" style=\"position:relative;\">Model<a href=\"#Model\" aria-label=\"Model permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>稍微對流程有概念後，我們要建立一個 Model 來管理資料來源，這次以 API 來練習，就是執行取得和更新資料的地方，拿 API 回傳的 Response：</p>\n<p>寫一個類別來放執行 API 連線後的 Callback，這就是我們的 Model </p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> ApiFunction{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun requestTestData(viewModel: TestViewModel){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        val call = ApiService.mApiClent.getAlbums()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        call.enqueue(object</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Callback</span><span class=\"mtk1\">&lt;TestData&gt;{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            override fun onFailure(call</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Call</span><span class=\"mtk1\">&lt;TestData&gt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">, t</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> Throwable</span><span class=\"mtk4\">?</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            override fun onResponse(call</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Call</span><span class=\"mtk1\">&lt;TestData&gt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">, response</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Response</span><span class=\"mtk1\">&lt;TestData&gt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (response!!.code() == </span><span class=\"mtk5\">200</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    val responseBody = response.body()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk3\">//待會解釋！</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    viewModel.setTestData(responseBody!!)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"ViewModel\" style=\"position:relative;\">ViewModel<a href=\"#ViewModel\" aria-label=\"ViewModel permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>ViewModel，就是要用來儲存 UI 需要的數據。</p>\n<p>還記得前面寫的 LiveData 特性嗎？\n我們就把 ViewModel 裡面放的數據全部改用 <code class=\"language-text\">MutableLiveData</code> 包裝，<code class=\"language-text\">MutableLiveData</code> 是 LiveData 提供的一個特別子類，可以調用方法 <code class=\"language-text\">setValue()</code> 或 <code class=\"language-text\">postValue()</code>，不僅可變，且線程是安全的。</p>\n<p>這兩種方法都可用來修改/更新儲存在 LiveData 中的資料，差別在於執行緒</p>\n<ul>\n<li>LiveData.setValue()  在主執行緒同步調用</li>\n<li>LiveData.postValue() 在背景執行緒同步調用</li>\n</ul>\n<hr>\n<p>寫一個 TestViewModel，繼承 ViewModel</p>\n<ul>\n<li>宣告一個資料型態為<TestData> 的 <code class=\"language-text\">MutableLiveData</code>---</li>\n<li>函式 requestTestData() 是給頁面 View 請求資料\n裡面實際上就是執行剛剛 Model 連線後的 Callback，為什麼要多繞一層呢？\n一般可直接把 call API 寫在 ViewModel，目前只有一支 API 看上去並不複雜，但如果考量到實際運作會有 N 個 API 要接，我會傾向把所有接 API 的程式碼寫在一起，而不是分散在各個 ViewModel---</li>\n</ul>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> TestViewModel: ViewModel() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//定義一個 MutableLiveData 的變數</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> var testData = </span><span class=\"mtk4\">MutableLiveData</span><span class=\"mtk1\">&lt;TestData&gt;()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//給View請求api用</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun requestTestData(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ApiFunction.requestTestData(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)　</span><span class=\"mtk3\">//從Model取資料的動作</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//讓Model呼叫，用來把資料儲存在LiveData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fun setTestData(result</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> TestData){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        testData.postValue = result  </span><span class=\"mtk3\">//給testData塞值</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//給Observer觀察，會回傳LiveData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// fun getTestData(): MutableLiveData&lt;TestData&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//     return testData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>函式 setTestData() 是給 Model 呼叫來塞值，使用 <code class=\"language-text\">postValue()</code>\n同上，因為把 call API 拉出去寫，所以另寫一個給 Model 呼叫塞值的函式---</li>\n<li>最後一個函式可寫可不寫\n如果不把 testData 設成 private 的話，就可以從外面呼叫到 LiveData---</li>\n</ul>\n<hr>\n<p>所以現在回去看 Model，應該就能理解為什麼這樣寫</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">override fun onResponse(call</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Call</span><span class=\"mtk1\">&lt;TestData&gt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">, response</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Response</span><span class=\"mtk1\">&lt;TestData&gt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">if</span><span class=\"mtk1\"> (response!!.code() == </span><span class=\"mtk5\">200</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        val responseBody = response.body()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//因為要塞值給LiveData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        viewModel.setTestData(responseBody!!)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<hr>\n<h3 id=\"View\" style=\"position:relative;\">View<a href=\"#View\" aria-label=\"View permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>最後的 View ，它到底要做什麼？\nView 是負責處理顯示 UI 及與使用者互動，在這裡會用到一個東西叫「<strong>Observer</strong> (觀察者)」</p>\n<p>Observer 定義了 <code class=\"language-text\">onChange()</code> 方法，這個方法是控制 LiveData 中資料發生變化時，頁面要做的動作（比如更新畫面），我們在裡面寫「當資料改變時要更新 TextView 顯示」。</p>\n<p>而這個更新動作，會通過 <code class=\"language-text\">observe()</code> 方法來連接 Observer 和 LiveData，訂閱 LiveData 中的資料</p>\n<h3 id=\"Observer-使用\" style=\"position:relative;\">Observer 使用<a href=\"#Observer-%E4%BD%BF%E7%94%A8\" aria-label=\"Observer 使用 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><strong>MainActivity.kt</strong></p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"java\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//聲明一個observer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">lateinit </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> testViewModel</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">ViewModel</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">lateinit </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> testObserver</span><span class=\"mtk4\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Observer</span><span class=\"mtk1\">&lt;TestData&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//實例化ViewModel和Observer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    testViewModel = ViewModelProviders.of(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).get(TestViewModel</span><span class=\"mtk4\">::</span><span class=\"mtk1\">class.java)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    testObserver = Observer{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        TextView.text = it.title </span><span class=\"mtk3\">//寫當資料發生變化時，UI要做的動作</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//call API</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    testViewModel.requestTestData()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//在需要的地方訂閱ViewModel裡的 testData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    testViewModel.testData.observe(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, testObserver)</span></span></span></code></pre>\n<p>一旦資料通過 <code class=\"language-text\">setValue</code> 方法更新後，LiveData 就通知所有訂閱它的 Observer（處於 Active 狀態的）\n這也是為何會說可以用 ViewModel 來進行 Activity/Fragment 之間的通訊，因為他們共享數據。</p>\n<h2 id=\"QA\" style=\"position:relative;\">Q&#x26;A<a href=\"#QA\" aria-label=\"QA permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>Activity Stop 之後，不會崩潰？</p>\n</blockquote>\n<p>LiveData 把 Activity 生命周期合併分成了 Inactive 與Active 兩種狀態（<code class=\"language-text\">onStart</code> 與 <code class=\"language-text\">onResume</code> 為 Active，其他為 inactive）。處於非活躍狀態的話，是不會收到 Livedata 任何事件的變更。</p>\n<hr>\n<blockquote>\n<p>為什麼使用 ViewModel 去保存數據？</p>\n</blockquote>\n<p>在 activity 銷毀重建時，可以用 Activity 的 <code class=\"language-text\">onSaveInstanceState()</code> 機制保存和恢復數據，但缺點明顯，只適合保存少量可以被序列化、反序列化的資料</p>\n<hr>\n<blockquote>\n<p>了解為什麼整個生命周期方式很重要？</p>\n</blockquote>\n<p>App 需要頻繁非同步請求資料，比如請求網路調介面，這些都是相當耗時。又 Activity 被銷毀後介面請求才返回，考慮到記憶體洩漏情況，會給我們增添好多複雜工作。\n但現在我們利用 ViewModel 處理資料回傳，可以解決此問題，意思只要繼承我們的 ViewModel 後，可能會出現的 bug，google 都幫我們處理了。</p>\n<hr>\n<blockquote>\n<p>LiveData 是怎麼判斷該 Observer 處於 Active 狀態？</p>\n</blockquote>\n<p>通過<code class=\"language-text\">observe()</code> 方法裡的第一個參數 LifecycleOwner，來獲取生命週期，判斷時候是否 DESTROYED 狀態，是的話直接 return，等於綁定了生命週期。</p>\n<h4 id=\"參考資料\" style=\"position:relative;\">參考資料<a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ol>\n<li><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/705679/#outline__2\">LiveData的分析與簡單使用</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10224442\">Android MVVM 架構</a></li>\n</ol>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .visual-studio-dark .mtk1 { color: #D4D4D4; }\n  .visual-studio-dark .mtk11 { color: #CE9178; }\n  .visual-studio-dark .mtk4 { color: #569CD6; }\n  .visual-studio-dark .mtk5 { color: #B5CEA8; }\n  .visual-studio-dark .mtk3 { color: #6A9955; }\n  .visual-studio-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#viewmodel%EF%BC%8C%E6%98%AF%E4%BB%80%E9%BA%BC\">ViewModel，是什麼</a></li>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#%E7%94%A8%E6%B3%95\">用法</a></li>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#livedata%EF%BC%8C%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\">LiveData，又是什麼？</a></li>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#%E7%94%A8%E6%B3%95-1\">用法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#%E4%BE%86%E5%AF%A6%E4%BD%9C%E5%9F%BA%E6%9C%AC-mvvm-%E6%9E%B6%E6%A7%8B\">來實作基本 MVVM 架構</a></p>\n<ul>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#model\">Model</a></li>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#viewmodel\">ViewModel</a></li>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#view\">View</a></li>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#observer-%E4%BD%BF%E7%94%A8\">Observer 使用</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#qa\">Q&#x26;A</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/kotlin/MVVM%E6%9E%B6%E6%A7%8B/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Android - 第一次 MVVM 就上手","type":"coding","date":"Mar 04, 2020","tags":["Kotlin"],"category":"Android","log":null,"thumbnail":null}}},"pageContext":{"slug":"/kotlin/MVVM架構/","previous":{"fields":{"slug":"/weekly journal/想知道自己現在在哪裡/"},"frontmatter":{"title":"#8 想知道自己現在在哪裡","tags":["life"],"date":"2020-02-27","category":"Weekly Journal","mark":null,"description":null,"log":null}},"next":{"fields":{"slug":"/Lidemy/版本控制 - CLI 基礎及 Git 指令/"},"frontmatter":{"title":"[第一週] Command Line 及 git 指令","tags":["git","Lidemy"],"date":"2020-06-05","category":"程式導師計畫","mark":null,"description":"用 CLI 對電腦下指令及如何進行版本控制","log":null}}}},"staticQueryHashes":["63159454"]}