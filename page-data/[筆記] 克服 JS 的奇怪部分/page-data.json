{"componentChunkName":"component---src-templates-blog-post-js","path":"/[筆記] 克服 JS 的奇怪部分/","result":{"data":{"site":{"siteMetadata":{"title":"Travel in Time.","author":"Zoe Yu"}},"markdownRemark":{"id":"db20a534-7403-577b-8d03-44cf371abf40","excerpt":"作為前端工程師的第一份工作，希望將基礎打得扎實些 這篇記錄從 Udemy 上學習《JavaScript: Understanding the Weird Part》的過程，筆記自己新學到、重新理解的 JavaScript 基礎知識。\n ch1 syntax parsers…","html":"<blockquote>\n<p>作為前端工程師的第一份工作，希望將基礎打得扎實些</p>\n<p>這篇記錄從 Udemy 上學習《JavaScript: Understanding the Weird Part》的過程，筆記自己新學到、重新理解的 JavaScript 基礎知識。\n<br/></p>\n</blockquote>\n<h2 id=\"ch1\" style=\"position:relative;\">ch1<a href=\"#ch1\" aria-label=\"ch1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><strong>syntax parsers 語法解析器</strong></p>\n<p>電腦不會直接看懂你寫的程式碼，中間需要有一個可以轉換 JavaScript 讓電腦讀懂，例如編譯器或直譯器，會一字一字去讀你的程式碼、確認語法有效的，才會翻譯成電腦看得動的東西</p>\n<ul>\n<li>把大括號 <code class=\"language-text\">{</code> 接在函數、for loop、if () 後面是為了避免 syntax parsers 自動幫你填入分號</li>\n<li>空格自由</li>\n</ul>\n<br/>\n<p><strong>lexical environments 詞彙環境</strong></p>\n<p>程式寫在哪裡是很重要的，lexical environments 指的是程式碼在開發中所處的位置，這將幫助編譯器決定、考慮它應該被放置哪個記憶體、周圍環境是什麼（寫在函式裡？被包在物件、陣列中？）</p>\n<p>=> 影響在執行階段時，它該對應的記憶體位置</p>\n<br/>\n<p><strong>execution context 執行環境</strong></p>\n<p>管理目前正在執行的程式碼。</p>\n<p>程式碼執行前，先依照 lexical Environment 被解析器轉換、創造並擺到該放的記憶體位置，最後才開始執行，某些特性（例如 JS 中的 hoisting）就是在創造階段產生。</p>\n<p>而在執行環境一段正在運行的程式碼，同樣的名稱只會有一個，一個名稱只會對應到一個值</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 宣告一個變數名稱 name，它對應的值是 &#39;zoe&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> name = </span><span class=\"mtk11\">&#39;zoe&#39;</span></span></span></code></pre>\n<p>名稱的確可以被定義多次，但在每層 execution context 它只會有一個值</p>\n<hr>\n<br/>\n<br/>\n<h2 id=\"ch2\" style=\"position:relative;\">ch2<a href=\"#ch2\" aria-label=\"ch2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在執行時，JS Engine 會創造一個基礎執行環境（base execution context）作為全域環境，同時也創造 <code class=\"language-text\">Global Object</code> 和 <code class=\"language-text\">this</code> 變數， <code class=\"language-text\">this</code> 會參照 <code class=\"language-text\">Global Object</code></p>\n<ul>\n<li>瀏覽器的 <code class=\"language-text\">Global Object</code> 指向 window（視窗）</li>\n<li>瀏覽器的 <code class=\"language-text\">this</code> 同樣指向 window（視窗）</li>\n<li>Node.js 的 <code class=\"language-text\">Global Object</code> => Global</li>\n</ul>\n<p><img src=\"https://i.imgur.com/nJRrWSM.png\"></p>\n<p>因為是全域，代表任何地方都可以存取到，而瀏覽器每一視窗各自有一個全域物件</p>\n<ul>\n<li>當你在全域中創建變數和函式，就會和 <code class=\"language-text\">Global Object</code> 連結起來</li>\n<li>全域環境的 <code class=\"language-text\">outer environment</code> 會是 null => 沒有更外層的執行環境</li>\n</ul>\n<hr>\n<h5 id=\"為什麼有-hoisting？\" style=\"position:relative;\">為什麼有 hoisting？<a href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89-hoisting%EF%BC%9F\" aria-label=\"為什麼有 hoisting？ permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>execution context 分成兩個階段：creation 和 execution</p>\n<ol>\n<li>\n<p>創造階段</p>\n<ul>\n<li>記憶體有了 <code class=\"language-text\">Global object</code>、<code class=\"language-text\">this</code> 變數和 <code class=\"language-text\">outer environment</code></li>\n<li>把變數和函式放進記憶體 => <span class=\"highlight\">有所謂的 hoisting，是因為在創造階段就為 variable、function 設定好他們的記憶體位置</span></li>\n<li>但變數的值和類型是什麼？<strong>要一直到執行階段才知道</strong></li>\n<li>函式則會先設定好，例如 <code class=\"language-text\">a: function()</code></li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p>執行階段：逐步、一行行執行</p>\n<ul>\n<li>每呼叫一個函式（invoke），就會在 stack 上堆一層 execution context</li>\n<li>stack 最上層就是目前正在執行的程式碼</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h5 id=\"scope-chain-和-outer-environment\" style=\"position:relative;\">scope chain 和 outer environment<a href=\"#scope-chain-%E5%92%8C-outer-environment\" aria-label=\"scope chain 和 outer environment permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>scope - 可以取用到變數的地方，chain - 對外部環境參照的連結</p>\n<ul>\n<li>變數會被定義在自己那層的執行環境</li>\n<li>每一個執行環境在創造階段時，除了 <code class=\"language-text\">variable object</code> 和 <code class=\"language-text\">this</code> 變數外，還會創造它要參照的外部環境連結</li>\n</ul>\n<p>在 JavaScript 中，如果你想要呼叫一個在當前執行環境所沒有的變數，會往它的 outer environment 去尋找，這個外部環境參照是怎麼決定的？<span class=\"highlight\">取決於「產生這個執行環境的 function 被寫在哪裡」<span></p>\n<p>outer environment 的參照，<strong>跟 stack 堆疊順序無關，而是跟 function 在哪裡被定義有關</strong>，就是前面提過的 lexical environment（程式碼實際被寫出來的地方）。</p>\n<ul>\n<li>在當前的執行環境找不到變數時，會到它參照的外部環境去尋找</li>\n<li>執行環境的創造 => 和 function 被呼叫有關</li>\n<li>\n<p>參照的外部環境 => 跟 function 定義位置有關</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> b() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    console.log(myVar) </span><span class=\"mtk3\">// 1，因為 function b 被定義在全域</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> a() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> myVar = </span><span class=\"mtk5\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    b() </span><span class=\"mtk3\">// 在 function a 裡面呼叫 b()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> myVar = </span><span class=\"mtk5\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">a()</span></span></span></code></pre>\n</li>\n</ul>\n<p>參考資料：<a href=\"https://pjchender.blogspot.com/2015/12/javascriptscope-chainouter-environment.html\">[筆記] JavaScript中Scope Chain和outer environment的概念</a></p>\n<h5 id=\"執行非同步事件\" style=\"position:relative;\">執行非同步事件<a href=\"#%E5%9F%B7%E8%A1%8C%E9%9D%9E%E5%90%8C%E6%AD%A5%E4%BA%8B%E4%BB%B6\" aria-label=\"執行非同步事件 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>JS Engine 是單執行緒，一次只做一件事，但它並非獨立存在於環境，在瀏覽器中還有提供其他引擎可以做事，像是處理 HTTP 請求資料、渲染畫面或觸發點擊事件等等，可以讓同一時間點有不只一件事在做，而他們也可以跟 JS Engine 溝通，來達到非同步處理的效果。</p>\n<p>當 JS Engine 接收到外部來了一個需要被處理的事件時（asynchronous callback），會先放進事件佇列，優先把 call stack 裡面的東西清空才會去處理事件佇列的東西</p>\n<p>詳細的可以參考之前寫過的 <a href=\"../Lidemy/%E8%AB%87%E8%AB%87%20Event%20Loop\">Event Loop</a>，了解運作機制</p>\n<hr>\n<br/>\n<br/>\n<h2 id=\"ch3\" style=\"position:relative;\">ch3<a href=\"#ch3\" aria-label=\"ch3 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h5 id=\"型別\" style=\"position:relative;\">型別<a href=\"#%E5%9E%8B%E5%88%A5\" aria-label=\"型別 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>和其他靜態型別的語言不同，JS 不需要事先說明型別，在執行時才會知道，也意味著同一變數可以在不同時間擁有不同型別</p>\n<ul>\n<li>基本型別就是一個值，而不像 object 是 name-value 組合</li>\n<li>在 JavaScript 中數字只有 number 這個型別（有時候運算會和你想的不太一樣）</li>\n</ul>\n<h6 id=\"認識-undefined\" style=\"position:relative;\">認識 undefined<a href=\"#%E8%AA%8D%E8%AD%98-undefined\" aria-label=\"認識 undefined permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h6>\n<ul>\n<li><code class=\"language-text\">undefined</code> 代表變數只是<strong>尚未被設定、其值不存在</strong>，不代表從未宣告，跟 not defined 不一樣</li>\n<li><code class=\"language-text\">var a</code> 會在建立執行環境時將 a 放進記憶體</li>\n<li>是一個內建的值，在創造階段時，所有變數被預設為 <code class=\"language-text\">undefined</code>（相當於是 JS 給的初始值）</li>\n<li>永遠不要設定變數為 <code class=\"language-text\">undefined</code> => 很難判斷變數是不是你設定，要就設定成 null（空值）</li>\n</ul>\n<hr>\n<h5 id=\"運算子\" style=\"position:relative;\">運算子<a href=\"#%E9%81%8B%E7%AE%97%E5%AD%90\" aria-label=\"運算子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> a = </span><span class=\"mtk5\">4</span><span class=\"mtk1\"> + </span><span class=\"mtk5\">3</span><span class=\"mtk1\">   </span><span class=\"mtk3\">// + 就是一個運算子，函數名稱是寫在兩個參數之間</span></span></span></code></pre>\n<ul>\n<li>特殊的內建函數，通常需要兩個參數來回傳一個結果</li>\n<li>中綴表示法，運算子放在參數中間</li>\n</ul>\n<p><strong>1. 優先性和相依性</strong></p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> a = </span><span class=\"mtk5\">4</span><span class=\"mtk1\"> + </span><span class=\"mtk5\">3</span><span class=\"mtk1\"> - </span><span class=\"mtk5\">2</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// 5</span></span></span></code></pre>\n<p>JS 是單執行緒，不會一次處理兩個函數，會決定先執行哪一個部分，先呼叫完一個才呼叫第二個，參考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">MDN 的 Precedence</a> 可以了解到它執行的優先序。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> b = </span><span class=\"mtk5\">2</span><span class=\"mtk1\">, c = </span><span class=\"mtk5\">3</span><span class=\"mtk1\">, d = </span><span class=\"mtk5\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">b = c = d </span><span class=\"mtk3\">// 4</span></span></span></code></pre>\n<p>具有相同的 precedence，則視 Associativity 來決定從哪裡計算起，像等號就是 right-to-left。</p>\n<br/>\n<p><strong>2. 強制轉型 coercion</strong></p>\n<ul>\n<li>轉換一個值的型別</li>\n<li>永遠用 <code class=\"language-text\">===</code> 來做相等比較</li>\n<li>\n<p>把東西放在 if 判斷式裡面，會被試著強制轉換成 Boolean 值，但要注意數字 0 是會被轉換成 false</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 可以拿來做一些判斷，像是「如果 a 存在的話就執行...、如果 a 沒有值則...」</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">if</span><span class=\"mtk1\"> (a) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  consol.log(</span><span class=\"mtk11\">&#39;true&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>使用 <code class=\"language-text\">||</code> 來給預設值，它會回傳第一個被轉型成 true 的值，讓程式碼變得簡潔，可以用它來建立預設值（default value）</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 早期做法</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> greet(name) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  name = name || </span><span class=\"mtk11\">&#39;default name&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  console.log(name)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">greet()</span></span></span></code></pre>\n</li>\n</ul>\n<p>偶爾在框架的 source code 裡面可能會看到這行程式碼，這樣寫的目的在於<strong>檢查全域命名空間</strong></p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"js\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">window.libraryName = window.libraryName || </span><span class=\"mtk11\">&#39;lib 2&#39;</span></span></span></code></pre>\n<hr>\n<br/>\n<br/>\n<h2 id=\"ch4\" style=\"position:relative;\">ch4<a href=\"#ch4\" aria-label=\"ch4 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"https://i.imgur.com/9iZOahx.png\"></p>\n<h5 id=\"物件\" style=\"position:relative;\">物件<a href=\"#%E7%89%A9%E4%BB%B6\" aria-label=\"物件 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ul>\n<li>可以用 <code class=\"language-text\">new Object</code> 或 <code class=\"language-text\">{}</code> 來建立物件，但不建議使用前者（詳見第五章節）</li>\n<li>Object 有屬性（property）及方法（method）</li>\n<li>Object 參考的是位置，會取得位置對應的屬性/方法，用 <code class=\"language-text\">.</code> 或 <code class=\"language-text\">[]</code> 來設定或取得都可以（dot/bracket notation），前者會比較簡潔</li>\n</ul>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> person = {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">person[</span><span class=\"mtk11\">&quot;firstName&quot;</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">&quot;Tony&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">person.lastName = </span><span class=\"mtk11\">&quot;Alice&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 建立 &quot;firstName&quot; 屬性的記憶體，object 會參考到 &quot;firstName&quot; 的位址</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">greet(person)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 將物件作為參數傳入 function greet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">greet({ firstName: </span><span class=\"mtk11\">&#39;Cathy&#39;</span><span class=\"mtk1\">, lastName: </span><span class=\"mtk11\">&#39;Jenny&#39;</span><span class=\"mtk1\">})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 也可以在傳入時才建立物件，JS 實際上在執行時會先處理過</span></span></span></code></pre>\n<blockquote>\n<p>補充：JSON 和 object literal syntax 的關係</p>\n</blockquote>\n<p>過去傳送 XML 耗費不必要的資源，所以有了 JavaScript object notation，形式上和 object literal syntax 相似，但還是有不同之處，比如屬性一定得包在 <code class=\"language-text\">&quot;&quot;</code> 引號</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"json\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk8\">&quot;data&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;basic&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&quot;name&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&quot;John&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&quot;email&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&quot;create_time&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk5\">1612247227</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>如果需要轉換兩者，只需透過以下方式</p>\n<ul>\n<li><code class=\"language-text\">JSON.stringify(object)</code> 轉換成 JSON 字串</li>\n<li><code class=\"language-text\">JSON.parse(JSON)</code> 轉換成物件</li>\n</ul>\n<p>參考資料：<a href=\"https://pjchender.blogspot.com/2016/01/javascriptobjectjson.html\">JavaScript中物件(object)和JSON格式的轉換</a></p>\n<hr>\n<br/>\n<h5 id=\"函式是物件的一種\" style=\"position:relative;\">函式是物件的一種<a href=\"#%E5%87%BD%E5%BC%8F%E6%98%AF%E7%89%A9%E4%BB%B6%E7%9A%84%E4%B8%80%E7%A8%AE\" aria-label=\"函式是物件的一種 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>在 JS 裡面，function 是 object 的一種，可以像其他型別一樣被設定成變數、被傳入其他地方，被快速創造出來使用，這樣的 function 被稱作是 <strong>First-class function</strong>：</p>\n<ul>\n<li>是一種特殊的物件</li>\n<li>可以將 function 存成變數</li>\n<li>可以將 function 當成參數代入另一 function</li>\n<li>可以在一個 function 中回傳另一個 function</li>\n<li>跟物件一樣有屬性（property）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/lYqVQWY.png\"></p>\n<p>當 function 被視為物件時，它還有兩個特別的屬性</p>\n<ol>\n<li>name property：function 的名稱，如果沒有的話就是匿名函式（anonymous function）</li>\n<li>code property：想像 functions 只是用來裝程式碼的容器，funcition 可以被呼叫、執行環境會被建立，執行裡面的程式碼</li>\n</ol>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> greet() {         </span><span class=\"mtk3\">// 建立名為 greet 的函式</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  console.log(</span><span class=\"mtk11\">&#39;Hello&#39;</span><span class=\"mtk1\">)     </span><span class=\"mtk3\">// code property</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">greet.language = </span><span class=\"mtk11\">&#39;english&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// 因為是 object，可以添加屬性</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">greet()                    </span><span class=\"mtk3\">// name property 加上 () =&gt; 呼叫函式</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(greet)         </span><span class=\"mtk3\">// 印出 code property 內容</span></span></span></code></pre>\n<p>參考資料：<a href=\"https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html\">[筆記] JavaScript 中函式就是一種物件 ─ 談談 first class function</a></p>\n<hr>\n<br/>\n<h5 id=\"函式：表達式和聲明式\" style=\"position:relative;\">函式：表達式和聲明式<a href=\"#%E5%87%BD%E5%BC%8F%EF%BC%9A%E8%A1%A8%E9%81%94%E5%BC%8F%E5%92%8C%E8%81%B2%E6%98%8E%E5%BC%8F\" aria-label=\"函式：表達式和聲明式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<p>先來認識表達式和聲明式的差別</p>\n<ol>\n<li>表達式</li>\n</ol>\n<p>輸入的那串程式執行後能直接回傳一個值（a unit of code that results in a values），一般情況，我們會把 expression 回傳的值存成一個變數，但並不是一定要存。</p>\n<p>例如下面都是表達式</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">a = </span><span class=\"mtk5\">3</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// = 會回傳右邊的 3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">1</span><span class=\"mtk1\"> + </span><span class=\"mtk5\">2</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// 沒有對該值做任何事</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">if</span><span class=\"mtk1\"> (a === </span><span class=\"mtk5\">3</span><span class=\"mtk1\">) {} </span><span class=\"mtk3\">// a === 3 會回傳 true</span></span></span></code></pre>\n<ol start=\"2\">\n<li>聲明式：會做事情，但不會直接回傳值</li>\n</ol>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> b = if (a === </span><span class=\"mtk5\">3</span><span class=\"mtk1\">) {}  </span><span class=\"mtk3\">// 不能用變數接❌</span></span></span></code></pre>\n<p>像 <code class=\"language-text\">if</code> 指令就是函式聲明，它並不會直接回傳一個值，也不能將它指定為一個變數</p>\n<hr>\n<br/>\n<p>Function 是物件的一種，它可以透過 expression 或 statements 兩種方式來建立函式：</p>\n<blockquote>\n<h6 id=\"函式聲明式-Function-Statements\" style=\"position:relative;\">函式聲明式 Function Statements<a href=\"#%E5%87%BD%E5%BC%8F%E8%81%B2%E6%98%8E%E5%BC%8F-Function-Statements\" aria-label=\"函式聲明式 Function Statements permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h6>\n<p>它不會直接回傳任何的值</p>\n</blockquote>\n<p>函式聲明會被提升（hoisting），在創造階段就被放進記憶體儲存，可以在執行這段程式前，就呼叫函式來使用</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">greet()   </span><span class=\"mtk3\">// it works!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> greeting() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    console.log(</span><span class=\"mtk11\">&#39;hello&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><img src=\"https://i.imgur.com/77o3UNs.png\"></p>\n<blockquote>\n<h6 id=\"函式表達式-Function-Expressions\" style=\"position:relative;\">函式表達式 Function Expressions<a href=\"#%E5%87%BD%E5%BC%8F%E8%A1%A8%E9%81%94%E5%BC%8F-Function-Expressions\" aria-label=\"函式表達式 Function Expressions permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h6>\n</blockquote>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> anonymousGreet = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() { </span><span class=\"mtk3\">// function object</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    console.log(</span><span class=\"mtk11\">&#39;hello&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>匿名函數物件，同樣在創造階段被放進記憶體</li>\n<li>而 <code class=\"language-text\">anonymousGreet</code> 變數知道它的位址，所以不需要再寫一個 name property 去參照它</li>\n<li>在上面的例子中，<code class=\"language-text\">function() {...}</code> 是函式表達式 => <span class=\"highlight\">被執行時會讓函數被創造出來，會回傳一個函數物件</span></li>\n</ul>\n<p>因為是一行一行執行，用 anonymousGreet 去指向函式位址，在還沒有被賦值之前就呼叫的話，會報錯</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">anonymousGreet() </span><span class=\"mtk3\">// error! </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> anonymousGreet = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    console.log(</span><span class=\"mtk11\">&#39;hello&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">anonymousGreet() </span><span class=\"mtk3\">// 變數已經指向它的位置，可以呼叫</span></span></span></code></pre>\n<hr>\n<br/>\n<h5 id=\"by-value-和-by-reference-基本觀念\" style=\"position:relative;\">by value 和 by reference 基本觀念<a href=\"#by-value-%E5%92%8C-by-reference-%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5\" aria-label=\"by value 和 by reference 基本觀念 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<ol>\n<li><strong>by value</strong></li>\n</ol>\n<p>在建立 primitive type 的變數，會是用拷貝 value 的方式，拷貝 a 的值填到 b 位址。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> a = </span><span class=\"mtk5\">3</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// 0x001</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> b</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">b = a     </span><span class=\"mtk3\">// 0x002</span></span></span></code></pre>\n<p>在不同記憶體位置上，彼此不會互相影響</p>\n<ol start=\"2\">\n<li><strong>by reference</strong></li>\n</ol>\n<p>將變數 c 設立成一個 Object，用 <strong>object literal</strong> 的方式指定物件的值，那麼就會是 by value、一樣會在記憶體中給它個位置。</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> c = { greeting: </span><span class=\"mtk11\">&#39;hello&#39;</span><span class=\"mtk1\">} </span><span class=\"mtk3\">// 0x001</span></span></span></code></pre>\n<p>但如果今天要把變數 c 的值等同於 d 時，因為 <code class=\"language-text\">=</code> 運算子知道 c 是指向物件，它不會創造新的記憶體位置給 d，而是讓 d 指向跟 c 一樣的地方</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> d</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">d = c  </span><span class=\"mtk3\">// 0x001</span></span></span></code></pre>\n<p>而參數，同樣會是用 by reference 的做法，如果將 d 作為參數傳進下方的函式，d 和 c 自身都會被改變</p>\n<pre class=\"grvsc-container visual-studio-dark\" data-language=\"javascript\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> changeGreeting(obj) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    obj.greeting = </span><span class=\"mtk11\">&#39;hola&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">changeGreeting(d) </span><span class=\"mtk3\">// 同樣改變 d 和 c</span></span></span></code></pre>\n<p>參考資料：<a href=\"https://pjchender.blogspot.com/2016/03/javascriptby-referenceby-value.html\">談談 JavaScript 中 by reference 和 by value 的重要觀念</a></p>\n<hr>\n<br/>\n<br/>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .visual-studio-dark .mtk3 { color: #6A9955; }\n  .visual-studio-dark .mtk4 { color: #569CD6; }\n  .visual-studio-dark .mtk1 { color: #D4D4D4; }\n  .visual-studio-dark .mtk11 { color: #CE9178; }\n  .visual-studio-dark .mtk5 { color: #B5CEA8; }\n  .visual-studio-dark .mtk8 { color: #9CDCFE; }\n  .visual-studio-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#ch1\">ch1</a></li>\n<li>\n<p><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#ch2\">ch2</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89-hoisting%EF%BC%9F\">為什麼有 hoisting？</a></li>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#scope-chain-%E5%92%8C-outer-environment\">scope chain 和 outer environment</a></li>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E5%9F%B7%E8%A1%8C%E9%9D%9E%E5%90%8C%E6%AD%A5%E4%BA%8B%E4%BB%B6\">執行非同步事件</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#ch3\">ch3</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li>\n<p><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E5%9E%8B%E5%88%A5\">型別</a></p>\n<ul>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E8%AA%8D%E8%AD%98-undefined\">認識 undefined</a></li>\n</ul>\n</li>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E9%81%8B%E7%AE%97%E5%AD%90\">運算子</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#ch4\">ch4</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E7%89%A9%E4%BB%B6\">物件</a></li>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E5%87%BD%E5%BC%8F%E6%98%AF%E7%89%A9%E4%BB%B6%E7%9A%84%E4%B8%80%E7%A8%AE\">函式是物件的一種</a></li>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#%E5%87%BD%E5%BC%8F%EF%BC%9A%E8%A1%A8%E9%81%94%E5%BC%8F%E5%92%8C%E8%81%B2%E6%98%8E%E5%BC%8F\">函式：表達式和聲明式</a></li>\n<li><a href=\"/%5B%E7%AD%86%E8%A8%98%5D%20%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86/#by-value-%E5%92%8C-by-reference-%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5\">by value 和 by reference 基本觀念</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[筆記] JavaScript 全攻略：克服 JS 的奇怪部分","type":"coding","date":"Apr 02, 2021","tags":["JavaScript","Udemy"],"category":null,"log":"list","thumbnail":null}}},"pageContext":{"slug":"/[筆記] 克服 JS 的奇怪部分/","previous":{"fields":{"slug":"/加羅神社、神代山/"},"frontmatter":{"title":"山隊｜加羅神社、神代山","tags":["政大山隊"],"date":"2021-03-24","category":"山裡的日子","mark":null,"description":null,"log":null}},"next":{"fields":{"slug":"/love-logs/"},"frontmatter":{"title":"Love Logs","tags":null,"date":"2021-05-01","category":null,"mark":null,"description":null,"log":"list"}}}},"staticQueryHashes":["63159454"]}