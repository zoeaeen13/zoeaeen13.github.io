{"version":3,"sources":["webpack:///./src/components/archiveSection.js","webpack:///./src/utils/utills.js","webpack:///./src/pages/archive.js"],"names":["ItemWrapper","styled","div","ArchiveTitle","h4","ArchiveSection","type","year","posts","map","post","index","node","frontmatter","key","getArchiveList","nodes","yearList","Set","forEach","date","split","add","archiveList","filter","push","BlogIndex","data","siteTitle","site","siteMetadata","title","allMarkdownRemark","edges","requiredTypes","includes","keywords","className","archive","props","query","render"],"mappings":"8FAAA,iDAIMA,EAAcC,IAAOC,IAAV,kFAAGD,CAAH,4DAIXE,EAAeF,IAAOG,GAAV,mFAAGH,CAAH,4EAmBHI,IAXS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACrC,OACE,kBAACR,EAAD,KACE,kBAACG,EAAD,KAAeI,GACdC,EAAMC,KAAI,SAACC,EAAMC,GAChB,MAAgB,SAATL,EAAkB,kBAAC,IAAD,CAAUA,KAAMI,EAAKE,KAAKC,YAAYP,KAAMQ,IAAKH,EAAOC,KAAMF,EAAKE,OAAW,kBAAC,IAAD,CAAWE,IAAKH,EAAOC,KAAMF,EAAKE,a,oCCrB1I,SAASG,EAAeC,GAC7B,IAAMC,EAAW,IAAIC,IACrBF,EAAMG,SAAQ,SAACT,GACb,IAAMH,EAAOG,EAAKE,KAAKC,YAAYO,KAAKC,MAAM,MAAM,GACpDJ,EAASK,IAAIf,MAGf,IAAMgB,EAAc,GAMpB,OALAN,EAASE,SAAQ,SAACZ,GAChB,IAAMC,EAAQQ,EAAMQ,QAAO,SAAAd,GAAI,OAAIA,EAAKE,KAAKC,YAAYO,KAAKC,MAAM,MAAM,KAAOd,KACjFgB,EAAYE,KAAK,CAAElB,OAAMC,aAGpBe,EAbT,mC,gFCAA,4FASMG,GATN,oBASkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAYD,EAAKE,KAAKC,aAAaC,MACnCf,EAAQW,EAAKK,kBAAkBC,MAC/BC,EAAgB,CAAC,OAAQ,UACzBX,EAAcR,YAAeC,EAAMQ,QAAO,SAAAZ,GAAI,OAAIsB,EAAcC,SAASvB,EAAKA,KAAKC,YAAYP,UAErG,OACE,kBAAC,IAAD,CAAQyB,MAAOH,GACb,kBAAC,IAAD,CACEG,MAAM,UACNK,SAAU,CAAC,OAAD,iCAKZ,yBAAKC,UAAU,mBACZd,EAAYd,KAAI,SAAC6B,EAAS3B,GACzB,OAAO,kBAAC,IAAD,CAAgBG,IAAKH,EAAOJ,KAAM+B,EAAQ/B,KAAMC,MAAO8B,EAAQ9B,eAwCjE,mBAAA+B,GAAK,OAClB,kBAAC,cAAD,CACEC,MAnCY,aAoCZC,OAAQ,SAAAd,GAAI,OACV,kBAACD,EAAD,eAAWa,OAAK,EAACZ,KAAMA,GAAUY","file":"component---src-pages-archive-js-a88bd94351c4d6c56490.js","sourcesContent":["import React from \"react\"\nimport styled from 'styled-components'\nimport { PostCard, PostTitle } from '../components/postType'\n\nconst ItemWrapper = styled.div`\nborder-bottom: 1px solid #eeeeee;\npadding: 24px 0 36px 0;\n`\nconst ArchiveTitle = styled.h4`\n  margin: 0;\n  padding: 0;\n  padding-bottom: 24px;\n  font-size: 22px;\n  font-weight: 600;\n`\n\nconst ArchiveSection =  ({ type, year, posts }) => {\n  return (\n    <ItemWrapper>\n      <ArchiveTitle>{year}</ArchiveTitle>\n      {posts.map((post, index) => {\n        return type === 'card'?  <PostCard type={post.node.frontmatter.type} key={index} node={post.node} /> : <PostTitle key={index} node={post.node}/>\n      })}\n    </ItemWrapper>\n)}\n\n\nexport default ArchiveSection","export function getArchiveList(nodes) {\n  const yearList = new Set()\n  nodes.forEach((post) => {\n    const year = post.node.frontmatter.date.split(', ')[1]\n    yearList.add(year)\n  })\n\n  const archiveList = []\n  yearList.forEach((year) => {\n    const posts = nodes.filter(post => post.node.frontmatter.date.split(', ')[1] === year)\n    archiveList.push({ year, posts })\n  })\n\n  return archiveList\n}","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ArchiveSection from '../components/archiveSection'\nimport { getArchiveList } from '../utils/utills'\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\n\nconst BlogIndex = ({ data }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const nodes = data.allMarkdownRemark.edges\n  const requiredTypes = ['blog', 'coding']\n  const archiveList = getArchiveList(nodes.filter(node => requiredTypes.includes(node.node.frontmatter.type)))\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"Archive\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      {/* <header className=\"archive-page-head\">\n        <h1>Archive</h1>\n      </header> */}\n      <div className=\"archive-wrapper\">\n        {archiveList.map((archive, index) => {\n          return <ArchiveSection key={index} year={archive.year} posts={archive.posts}/>\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            type\n            tags\n            category\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <BlogIndex props data={data} {...props} />\n    )}\n  />\n)\n"],"sourceRoot":""}