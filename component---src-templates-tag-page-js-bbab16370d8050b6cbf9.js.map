{"version":3,"sources":["webpack:///./src/templates/tag-page.js","webpack:///./src/components/postType/Title.js","webpack:///./src/components/postType/Card.js","webpack:///./src/components/postType/Intro.js","webpack:///./src/components/postType/Gallery.js"],"names":["TagPageTemplate","pageContext","data","location","tag","posts","tags","allMarkdownRemark","edges","siteTitle","site","siteMetadata","title","charAt","toUpperCase","slice","keywords","className","totalCount","map","node","sub","key","fields","slug","type","frontmatter","postClass","PostLink","styled","Link","PostDate","p","PostTitle","to","date","PostArticle","article","PostCover","props","url","Category","div","Content","TagWrap","PostCard","category","index","excerpt","thumbnail","childImageSharp","fluid","src","IntroWrapper","PostDetail","PostDesc","PostIntro","description","Mask","PostContent","PostGallery"],"mappings":"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","file":"component---src-templates-tag-page-js-bbab16370d8050b6cbf9.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { PostCard } from \"../components/postType\"\n\nconst TagPageTemplate = ({pageContext, data, location}) => {\n    const tag = pageContext.tag\n    const tagList = pageContext.tags\n    const posts = data.allMarkdownRemark.edges\n    const siteTitle = data.site.siteMetadata.title\n\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO\n          title={`#${tag.charAt(0).toUpperCase() + tag.slice(1)}`}\n          keywords={[`${tag}`, `blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <header className=\"tag-page-head\">\n          <h1>#{tag}({data.allMarkdownRemark.totalCount})</h1>\n        </header>\n        <div className=\"post-feed\">\n          {posts.map(({ node }) => {\n            return (\n              <PostCard\n                sub={'category'}\n                key={node.fields.slug}\n                type={node.frontmatter.type}\n                node={node}\n                postClass={`post`}\n              />\n            )\n          })}\n        </div>\n      </Layout>\n    )\n}\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query PostByTag($tag: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { tags: { in: [$tag] } } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            category\n            type\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from 'styled-components'\n\nconst PostLink = styled(Link)`\n  font-size: 16px;\n  line-height: 23px;\n  letter-spacing: .48px;\n  font-weight: 400;\n  font-stretch: 100%;\n  color: #666666;\n  text-decoration: none;\n  outline: none;\n  transition: all .3s ease;\n\n  &:hover {\n    color: #C5322E;\n    text-decoration: none;\n  }\n`\nconst PostDate = styled.p`\n  color: #9e9e9e;\n  font-size: 13px;\n  font-weight: 500;\n`\n\nconst PostTitle = ({ type, node }) => {\n  return (\n    <>\n      <PostLink to={node.fields.slug}>{node.frontmatter.title}</PostLink>\n      {<PostDate>{node.frontmatter.date}</PostDate>}\n    </>\n  )\n}\n\nexport default PostTitle","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from 'styled-components'\nimport { kebabCase } from 'lodash'\nconst PostArticle = styled.article`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  width: 100%;\n  padding: 30px 0;\n\n  @media (max-width: 800px) {\n    flex-direction: column;\n  }\n`\n\nconst PostCover = styled(Link)`\n  display: block;\n  width: 27%;\n  height:0;\n  padding-bottom: 18%;\n  overflow: hidden;\n  background-size: cover;\n  ${props => `\n    background-image: url(${props.url? props.url:''});\n  `}\n  transition: opacity .3s ease-in-out;\n  opacity: 1;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  @media (max-width: 800px) {\n    width: 100%;\n    padding-bottom: 55%;\n  }\n`\n\nconst Category = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  padding-right: 10px;\n  margin-bottom: 10px;\n  margin-right: 10px;\n\n  @media (max-width: 800px) {\n    width: 100%;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  \n  h4 {\n    margin: 0;\n    padding: 0;\n    margin-bottom: 10px;\n    font-size: 16px;\n    color: #687385;\n    font-weight: 700;\n    white-space: nowrap;\n\n    @media (max-width: 800px) {\n      margin: 0;\n      margin-right: 10px;\n      font-size: 12px;\n      font-weight: bold;\n      color: #919aa9;\n    }\n  }\n\n  a {\n    white-space: nowrap;\n    color: #687385;\n    font-size: 14px;\n    cursor: pointer;\n\n    &:hover {\n      color: #4a4a4a;\n    }\n\n    @media (max-width: 800px) {\n      font-size: 12px;\n      font-weight: bold;\n      color: #919aa9;\n    }\n  }\n`\n\nconst Content = styled.div`\n  width: ${props => props.type === 'coding' ? '75%': '50%'};\n  padding-right: 10px;\n\n  a {\n    display: block;\n    font-size: 20px;\n    margin: 0;\n    padding: 0;\n    margin-bottom: 10px;\n    color: #4a4a4a;\n\n    &:hover {\n      color: #C5322E;\n      text-decoration: none;\n    }\n  }\n\n  p {\n    overflow:hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: ${props => props.type === 'coding' ? '2': '3'};\n    -webkit-box-orient: vertical;\n  }\n\n  @media (max-width: 800px) {\n    width: 100%;\n    padding-right: 0px;\n  }\n`\nconst TagWrap = styled.div`\n  a {\n    display: block;\n    @media (max-width: 800px) {\n      display: none;\n    }\n  }\n`\n\n\nconst PostCard =  ({ sub, type, node }) => {\n  const tags = node.frontmatter.tags\n  return (\n  <PostArticle>\n    <Category>\n      <h4>{node.frontmatter.date}</h4>\n      {sub === 'category' ?\n        (<Link to={`/category/${kebabCase(node.frontmatter.category)}`}>{node.frontmatter.category}</Link>) :\n        (<TagWrap>\n          {tags.map((tag, index) => <Link key={index} to={`/tags/${kebabCase(tag)}`}>{`#${tag}`}</Link>)}\n        </TagWrap>)\n      }\n    </Category>\n    <Content type={type}>\n      <Link to={node.fields.slug}>{node.frontmatter.title || node.fields.slug}</Link>\n      <p>{node.excerpt !== 'â€¦'? node.excerpt : ''}</p>\n    </Content>\n    {node.frontmatter.thumbnail && <PostCover to={node.fields.slug} url={node.frontmatter.thumbnail.childImageSharp.fluid.src} />}\n  </PostArticle>\n)}\n\n\nexport default PostCard","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from 'styled-components'\nimport { kebabCase } from 'lodash'\n\nconst IntroWrapper = styled.div`\n  padding: 20px;\n\n  @media (max-width: 850px) {\n    padding: 20px 0;\n  }\n\n  hr {\n    margin: 0;\n    padding: 0;\n    width: 10px;\n    height: 1px;\n    background: #9a9a9a;\n  }\n`\n\nconst PostDetail = styled.div`\n  display: flex;\n  margin: 10px 0;\n\n  p, a {\n    margin: 0;\n    padding: 0;\n    margin-right: 10px;\n    color: #9e9e9e;\n    font-size: 13px;\n    font-weight: 500;\n  }\n\n  a {\n    font-weight: bold;\n  }\n`\n\nconst PostLink = styled(Link)`\n  margin-bottom: .25rem;\n  font-size: 1.9rem;\n  font-weight: bold;\n  line-height: 1.4;\n  letter-spacing: .48px;\n\n  color: #666666;\n  text-decoration: none;\n  outline: none;\n  transition: all .3s ease;\n\n  &:hover {\n    color: #C5322E;\n    text-decoration: none;\n  }\n`\n\nconst PostDesc = styled.p`\n  font-size: 16px;\n  overflow:hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`\n\nconst PostIntro = ({ node }) => {\n  return (\n    <IntroWrapper>\n      <PostLink to={node.fields.slug}>{node.frontmatter.title}</PostLink>\n      <PostDetail>\n        <p>{node.frontmatter.date}</p>\n        <Link to={`/category/${kebabCase(node.frontmatter.category)}`}>{node.frontmatter.category}</Link>\n      </PostDetail>\n      <PostDesc>{node.frontmatter.description || node.excerpt}</PostDesc>\n      <hr/>\n    </IntroWrapper>\n  )\n}\n\nexport default PostIntro","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from 'styled-components'\n\nconst PostCard = styled.article`\n  position: relative;\n  display: flex;\n  margin-bottom: 5vh;\n\n  @media (max-width: 1024px) {\n    width: 100%;\n    flex-direction: column;\n  }\n`\nconst PostCover = styled(Link)`\n  position: relative;\n  display: block;\n  width: 500px;\n  height: 338px;\n  padding-bottom: 18%;\n  overflow: hidden;\n  background-size: cover;\n  background-position: center center;\n\n  ${props => `\n    background-image: url(${props.url? props.url:''});\n  `}\n\n  @media (max-width: 1024px) {\n    width: 100%;\n    padding-bottom: 55%;\n\n    & > div {\n      opacity: 1;\n    }\n\n    & article {\n      visibility: visible;\n    }\n  }\n\n  &:hover {\n    & > div {\n      opacity: 1;\n    }\n\n    & article {\n      visibility: visible;\n    }\n  }\n`\nconst Mask = styled.div`\n  position: absolute;\n  background: rgba(0, 0, 0, .3);\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  transition: opacity .3s ease-in-out;\n`\nconst PostContent = styled.div`\n  position: absolute;\n  top: 50px;\n  left: 550px;\n  padding: 10px;\n  white-space: normal;\n  width: 250px;\n  height: 180px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 7;\n  -webkit-box-orient: vertical;\n  font-style: italic;\n\n  @media (max-width: 1024px) {\n    position: relative;\n    top: 0;\n    left: 0;\n    width: auto;\n    height: auto;\n  }\n`\nconst PostDetail = styled.article`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  visibility: hidden;\n  position: absolute;\n  bottom: 15px;\n  right: 15px;\n  color: white;\n\n  h3, h5 {\n    text-align:right;\n    margin: 0;\n    padding: 0;\n    font-family: \"IBM Plex Serif\",source-han-serif-tc,serif;\n    font-size: 28px;\n    line-height: 32px;\n  }\n  h5 {\n    font-size: 13px;\n  }\n`\n\nconst PostGallery =  ({ node }) => {\n  const tags = node.frontmatter.tags\n  return (\n    <PostCard>\n      <PostCover to={node.fields.slug} url={node.frontmatter.thumbnail.childImageSharp.fluid.src}>\n        <Mask />\n        <PostDetail>\n          <h5>{node.frontmatter.date}</h5>\n          <h3>{node.frontmatter.title}</h3>\n        </PostDetail>\n      </PostCover>\n      <PostContent>{node.excerpt !== 'â€¦'? node.excerpt : ''}</PostContent>\n    </PostCard>\n  )}\n\n\nexport default PostGallery"],"sourceRoot":""}